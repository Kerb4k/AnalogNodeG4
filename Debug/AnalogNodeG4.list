
AnalogNodeG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e0  080052e0  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080052e0  080052e0  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e0  080052e0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e4  080052e4  000062e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080052e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000010  080052f8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080052f8  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001499a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a72  00000000  00000000  0001b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0001e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc8  00000000  00000000  0001f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020843  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001587e  00000000  00000000  000410eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da77b  00000000  00000000  00056969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001310e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005890  00000000  00000000  00131128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001369b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080052a0 	.word	0x080052a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080052a0 	.word	0x080052a0

08000218 <Config_Setup>:
#include "config.h"

#define ID 1


void Config_Setup(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
 800021c:	f000 f802 	bl	8000224 <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <Config_1>:

void Config_1(void) {
 8000224:	b490      	push	{r4, r7}
 8000226:	b0a6      	sub	sp, #152	@ 0x98
 8000228:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < 16; i++) {
 800022a:	2300      	movs	r3, #0
 800022c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000230:	e02e      	b.n	8000290 <Config_1+0x6c>
		sensors[i].transfer_function = TF_3V3;
 8000232:	4a9a      	ldr	r2, [pc, #616]	@ (800049c <Config_1+0x278>)
 8000234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000238:	011b      	lsls	r3, r3, #4
 800023a:	4413      	add	r3, r2
 800023c:	4a98      	ldr	r2, [pc, #608]	@ (80004a0 <Config_1+0x27c>)
 800023e:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 8000240:	4a96      	ldr	r2, [pc, #600]	@ (800049c <Config_1+0x278>)
 8000242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	4413      	add	r3, r2
 800024a:	3304      	adds	r3, #4
 800024c:	2200      	movs	r2, #0
 800024e:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 20;
 8000250:	4a92      	ldr	r2, [pc, #584]	@ (800049c <Config_1+0x278>)
 8000252:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3306      	adds	r3, #6
 800025c:	2214      	movs	r2, #20
 800025e:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 8000260:	4a8e      	ldr	r2, [pc, #568]	@ (800049c <Config_1+0x278>)
 8000262:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000266:	011b      	lsls	r3, r3, #4
 8000268:	4413      	add	r3, r2
 800026a:	3308      	adds	r3, #8
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 8000270:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000274:	b2d9      	uxtb	r1, r3
 8000276:	4a89      	ldr	r2, [pc, #548]	@ (800049c <Config_1+0x278>)
 8000278:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800027c:	011b      	lsls	r3, r3, #4
 800027e:	4413      	add	r3, r2
 8000280:	330c      	adds	r3, #12
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 8000286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800028a:	3301      	adds	r3, #1
 800028c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000290:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000294:	2b0f      	cmp	r3, #15
 8000296:	ddcc      	ble.n	8000232 <Config_1+0xe>
	}

	// Sensor definitions
	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in0};
 8000298:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	4b7f      	ldr	r3, [pc, #508]	@ (80004a4 <Config_1+0x280>)
 80002a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80002ac:	230c      	movs	r3, #12
 80002ae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80002b2:	2364      	movs	r3, #100	@ 0x64
 80002b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80002b8:	2302      	movs	r3, #2
 80002ba:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in5};
 80002be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	4b75      	ldr	r3, [pc, #468]	@ (80004a4 <Config_1+0x280>)
 80002ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80002d0:	230d      	movs	r3, #13
 80002d2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80002d6:	2364      	movs	r3, #100	@ 0x64
 80002d8:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80002dc:	2307      	movs	r3, #7
 80002de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in4};
 80002e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	4b6c      	ldr	r3, [pc, #432]	@ (80004a4 <Config_1+0x280>)
 80002f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80002f4:	230e      	movs	r3, #14
 80002f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80002fa:	2364      	movs	r3, #100	@ 0x64
 80002fc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000300:	2306      	movs	r3, #6
 8000302:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 8000306:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <Config_1+0x284>)
 8000316:	657b      	str	r3, [r7, #84]	@ 0x54
 8000318:	2302      	movs	r3, #2
 800031a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800031e:	2364      	movs	r3, #100	@ 0x64
 8000320:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000324:	2303      	movs	r3, #3
 8000326:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Sensor APPS1 = {TF_APPS1, 1, 100, 0, V24_in1};
 800032a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	4b5c      	ldr	r3, [pc, #368]	@ (80004ac <Config_1+0x288>)
 800033a:	647b      	str	r3, [r7, #68]	@ 0x44
 800033c:	2301      	movs	r3, #1
 800033e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000342:	2364      	movs	r3, #100	@ 0x64
 8000344:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8000348:	2305      	movs	r3, #5
 800034a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	Sensor ANGLE = {TF_24V, 6, 100, 0, V24_in0};
 800034e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	4b54      	ldr	r3, [pc, #336]	@ (80004b0 <Config_1+0x28c>)
 800035e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000360:	2306      	movs	r3, #6
 8000362:	873b      	strh	r3, [r7, #56]	@ 0x38
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000368:	2309      	movs	r3, #9
 800036a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 800036e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	4b4d      	ldr	r3, [pc, #308]	@ (80004b4 <Config_1+0x290>)
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000380:	2303      	movs	r3, #3
 8000382:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000384:	2364      	movs	r3, #100	@ 0x64
 8000386:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000388:	230b      	movs	r3, #11
 800038a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	Sensor F_ROLL = {TF_5V, 10, 100, 0, V5_in6};
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	4b46      	ldr	r3, [pc, #280]	@ (80004b8 <Config_1+0x294>)
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	230a      	movs	r3, #10
 80003a2:	833b      	strh	r3, [r7, #24]
 80003a4:	2364      	movs	r3, #100	@ 0x64
 80003a6:	837b      	strh	r3, [r7, #26]
 80003a8:	2308      	movs	r3, #8
 80003aa:	f887 3020 	strb.w	r3, [r7, #32]
	Sensor F_HEAVE = {TF_5V, 8, 100, 0, V5_in3};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <Config_1+0x294>)
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	2308      	movs	r3, #8
 80003c0:	813b      	strh	r3, [r7, #8]
 80003c2:	2364      	movs	r3, #100	@ 0x64
 80003c4:	817b      	strh	r3, [r7, #10]
 80003c6:	230a      	movs	r3, #10
 80003c8:	743b      	strb	r3, [r7, #16]

    sensors[APPS1.pin] = APPS1;
 80003ca:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80003ce:	4a33      	ldr	r2, [pc, #204]	@ (800049c <Config_1+0x278>)
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	4413      	add	r3, r2
 80003d4:	461c      	mov	r4, r3
 80003d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[APPS2.pin] = APPS2;
 80003e0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80003e4:	4a2d      	ldr	r2, [pc, #180]	@ (800049c <Config_1+0x278>)
 80003e6:	011b      	lsls	r3, r3, #4
 80003e8:	4413      	add	r3, r2
 80003ea:	461c      	mov	r4, r3
 80003ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[BPPS.pin] = BPPS;
 80003f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80003fa:	4a28      	ldr	r2, [pc, #160]	@ (800049c <Config_1+0x278>)
 80003fc:	011b      	lsls	r3, r3, #4
 80003fe:	4413      	add	r3, r2
 8000400:	461c      	mov	r4, r3
 8000402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN1.pin] = BTN1;
 800040c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8000410:	4a22      	ldr	r2, [pc, #136]	@ (800049c <Config_1+0x278>)
 8000412:	011b      	lsls	r3, r3, #4
 8000414:	4413      	add	r3, r2
 8000416:	461c      	mov	r4, r3
 8000418:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800041c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800041e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN2.pin] = BTN2;
 8000422:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000426:	4a1d      	ldr	r2, [pc, #116]	@ (800049c <Config_1+0x278>)
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	4413      	add	r3, r2
 800042c:	461c      	mov	r4, r3
 800042e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN3.pin] = BTN3;
 8000438:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800043c:	4a17      	ldr	r2, [pc, #92]	@ (800049c <Config_1+0x278>)
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4413      	add	r3, r2
 8000442:	461c      	mov	r4, r3
 8000444:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800044a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[ANGLE.pin] = ANGLE;
 800044e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000452:	4a12      	ldr	r2, [pc, #72]	@ (800049c <Config_1+0x278>)
 8000454:	011b      	lsls	r3, r3, #4
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3
 800045a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800045e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[F_ROLL.pin] = F_ROLL;
 8000464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000468:	4a0c      	ldr	r2, [pc, #48]	@ (800049c <Config_1+0x278>)
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	4413      	add	r3, r2
 800046e:	461c      	mov	r4, r3
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[F_HEAVE.pin] = F_HEAVE;
 800047a:	7c3b      	ldrb	r3, [r7, #16]
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <Config_1+0x278>)
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	4413      	add	r3, r2
 8000482:	461c      	mov	r4, r3
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	

    CAN_interval = 20;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <Config_1+0x298>)
 800048e:	2214      	movs	r2, #20
 8000490:	801a      	strh	r2, [r3, #0]
}
 8000492:	bf00      	nop
 8000494:	3798      	adds	r7, #152	@ 0x98
 8000496:	46bd      	mov	sp, r7
 8000498:	bc90      	pop	{r4, r7}
 800049a:	4770      	bx	lr
 800049c:	20000280 	.word	0x20000280
 80004a0:	080010c1 	.word	0x080010c1
 80004a4:	08001275 	.word	0x08001275
 80004a8:	08001221 	.word	0x08001221
 80004ac:	080011cd 	.word	0x080011cd
 80004b0:	08001139 	.word	0x08001139
 80004b4:	08001175 	.word	0x08001175
 80004b8:	080010fd 	.word	0x080010fd
 80004bc:	20000340 	.word	0x20000340

080004c0 <CanSend>:
}CAN_Message;

CAN_Message RxMessage;
CAN_Message TxMessage;

void CanSend(uint8_t *TxData){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004c8:	e001      	b.n	80004ce <CanSend+0xe>
		Error_Handler();
 80004ca:	f000 fb93 	bl	8000bf4 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <CanSend+0x34>)
 80004d0:	f002 fd5c 	bl	8002f8c <HAL_FDCAN_GetTxFifoFreeLevel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d007      	beq.n	80004ea <CanSend+0x2a>
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4906      	ldr	r1, [pc, #24]	@ (80004f8 <CanSend+0x38>)
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <CanSend+0x34>)
 80004e0:	f002 fc08 	bl	8002cf4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1ef      	bne.n	80004ca <CanSend+0xa>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200001d0 	.word	0x200001d0
 80004f8:	20000344 	.word	0x20000344

080004fc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d017      	beq.n	8000540 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000514:	2140      	movs	r1, #64	@ 0x40
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f002 fc30 	bl	8002d7c <HAL_FDCAN_GetRxMessage>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000522:	f000 fb67 	bl	8000bf4 <Error_Handler>
 8000526:	e001      	b.n	800052c <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000528:	f000 f812 	bl	8000550 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f002 fd3d 	bl	8002fb0 <HAL_FDCAN_ActivateNotification>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 800053c:	f000 fb5a 	bl	8000bf4 <Error_Handler>
		}
	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000002d 	.word	0x2000002d
 800054c:	20000368 	.word	0x20000368

08000550 <decode>:
	CanSend(Tx.Bytes);

			
}

void decode(){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	switch(RxMessage.Bytes[0]){
	
	}
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fed2 	bl	800130e <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 800056a:	f7ff fe55 	bl	8000218 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f84b 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fad1 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000576:	f000 fa9d 	bl	8000ab4 <MX_DMA_Init>
  MX_ADC1_Init();
 800057a:	f000 f885 	bl	8000688 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800057e:	f000 fa05 	bl	800098c <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000582:	f000 fa49 	bl	8000a18 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000586:	f000 f949 	bl	800081c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
    //if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
  //  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
  //  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
    if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 800058a:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <main+0x94>)
 800058c:	f002 fb8a 	bl	8002ca4 <HAL_FDCAN_Start>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <main+0x3c>
 8000596:	f000 fb2d 	bl	8000bf4 <Error_Handler>
 800059a:	e008      	b.n	80005ae <main+0x4e>
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a2:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <main+0x98>)
 80005a4:	f003 f9cc 	bl	8003940 <HAL_GPIO_WritePin>
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <main+0x9c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
    if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80005ae:	2200      	movs	r2, #0
 80005b0:	2101      	movs	r1, #1
 80005b2:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <main+0x94>)
 80005b4:	f002 fcfc 	bl	8002fb0 <HAL_FDCAN_ActivateNotification>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x62>
 80005be:	f000 fb19 	bl	8000bf4 <Error_Handler>

    uint8_t counter = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //send can message
    uint8_t TxData[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80005c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <main+0xa0>)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	e883 0003 	stmia.w	r3, {r0, r1}
    TxHeader.Identifier = 0x01;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <main+0xa4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
    TxHeader.DataLength = 8;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <main+0xa4>)
 80005da:	2208      	movs	r2, #8
 80005dc:	60da      	str	r2, [r3, #12]

    CanSend(TxData);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff6d 	bl	80004c0 <CanSend>
    HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f000 ff01 	bl	80013f0 <HAL_Delay>
  {
 80005ee:	bf00      	nop
 80005f0:	e7e9      	b.n	80005c6 <main+0x66>
 80005f2:	bf00      	nop
 80005f4:	200001d0 	.word	0x200001d0
 80005f8:	48000400 	.word	0x48000400
 80005fc:	20000000 	.word	0x20000000
 8000600:	080052b8 	.word	0x080052b8
 8000604:	20000344 	.word	0x20000344

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2238      	movs	r2, #56	@ 0x38
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fe16 	bl	8005248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800062e:	f003 f99f 	bl	8003970 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2340      	movs	r3, #64	@ 0x40
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fa45 	bl	8003ad8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000654:	f000 face 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2301      	movs	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fd43 	bl	80040fc <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800067c:	f000 faba 	bl	8000bf4 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	@ 0x30
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2220      	movs	r2, #32
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 fdd1 	bl	8005248 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a6:	4b56      	ldr	r3, [pc, #344]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80006ae:	4b54      	ldr	r3, [pc, #336]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b52      	ldr	r3, [pc, #328]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006da:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006dc:	2201      	movs	r2, #1
 80006de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80006e0:	4b47      	ldr	r3, [pc, #284]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006e2:	2206      	movs	r2, #6
 80006e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b46      	ldr	r3, [pc, #280]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ee:	4b44      	ldr	r3, [pc, #272]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006fa:	4b41      	ldr	r3, [pc, #260]	@ (8000800 <MX_ADC1_Init+0x178>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <MX_ADC1_Init+0x178>)
 8000704:	2200      	movs	r2, #0
 8000706:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000708:	4b3d      	ldr	r3, [pc, #244]	@ (8000800 <MX_ADC1_Init+0x178>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	483b      	ldr	r0, [pc, #236]	@ (8000800 <MX_ADC1_Init+0x178>)
 8000712:	f001 f865 	bl	80017e0 <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 fa6a 	bl	8000bf4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4619      	mov	r1, r3
 800072a:	4835      	ldr	r0, [pc, #212]	@ (8000800 <MX_ADC1_Init+0x178>)
 800072c:	f001 fdf2 	bl	8002314 <HAL_ADCEx_MultiModeConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000736:	f000 fa5d 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073a:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <MX_ADC1_Init+0x17c>)
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073e:	2306      	movs	r3, #6
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000746:	237f      	movs	r3, #127	@ 0x7f
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074a:	2304      	movs	r3, #4
 800074c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	482a      	ldr	r0, [pc, #168]	@ (8000800 <MX_ADC1_Init+0x178>)
 8000758:	f001 f9c6 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000762:	f000 fa47 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000766:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_ADC1_Init+0x180>)
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800076a:	230c      	movs	r3, #12
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4823      	ldr	r0, [pc, #140]	@ (8000800 <MX_ADC1_Init+0x178>)
 8000774:	f001 f9b8 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800077e:	f000 fa39 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000782:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_ADC1_Init+0x184>)
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000786:	2312      	movs	r3, #18
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	481c      	ldr	r0, [pc, #112]	@ (8000800 <MX_ADC1_Init+0x178>)
 8000790:	f001 f9aa 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800079a:	f000 fa2b 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_ADC1_Init+0x188>)
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007a2:	2318      	movs	r3, #24
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4815      	ldr	r0, [pc, #84]	@ (8000800 <MX_ADC1_Init+0x178>)
 80007ac:	f001 f99c 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80007b6:	f000 fa1d 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <MX_ADC1_Init+0x18c>)
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_ADC1_Init+0x178>)
 80007ca:	f001 f98d 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80007d4:	f000 fa0e 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_ADC1_Init+0x190>)
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007dc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_ADC1_Init+0x178>)
 80007e8:	f001 f97e 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80007f2:	f000 f9ff 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	@ 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000038 	.word	0x20000038
 8000804:	04300002 	.word	0x04300002
 8000808:	08600004 	.word	0x08600004
 800080c:	0c900008 	.word	0x0c900008
 8000810:	10c00010 	.word	0x10c00010
 8000814:	32601000 	.word	0x32601000
 8000818:	3ef08000 	.word	0x3ef08000

0800081c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fd0d 	bl	8005248 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800082e:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_ADC2_Init+0x150>)
 8000830:	4a4f      	ldr	r2, [pc, #316]	@ (8000970 <MX_ADC2_Init+0x154>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000834:	4b4d      	ldr	r3, [pc, #308]	@ (800096c <MX_ADC2_Init+0x150>)
 8000836:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800083a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b4b      	ldr	r3, [pc, #300]	@ (800096c <MX_ADC2_Init+0x150>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000842:	4b4a      	ldr	r3, [pc, #296]	@ (800096c <MX_ADC2_Init+0x150>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000848:	4b48      	ldr	r3, [pc, #288]	@ (800096c <MX_ADC2_Init+0x150>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084e:	4b47      	ldr	r3, [pc, #284]	@ (800096c <MX_ADC2_Init+0x150>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000854:	4b45      	ldr	r3, [pc, #276]	@ (800096c <MX_ADC2_Init+0x150>)
 8000856:	2204      	movs	r2, #4
 8000858:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <MX_ADC2_Init+0x150>)
 800085c:	2200      	movs	r2, #0
 800085e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <MX_ADC2_Init+0x150>)
 8000862:	2201      	movs	r2, #1
 8000864:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_ADC2_Init+0x150>)
 8000868:	2206      	movs	r2, #6
 800086a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800086c:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <MX_ADC2_Init+0x150>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000874:	4b3d      	ldr	r3, [pc, #244]	@ (800096c <MX_ADC2_Init+0x150>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087a:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <MX_ADC2_Init+0x150>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000880:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_ADC2_Init+0x150>)
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000888:	4b38      	ldr	r3, [pc, #224]	@ (800096c <MX_ADC2_Init+0x150>)
 800088a:	2200      	movs	r2, #0
 800088c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800088e:	4b37      	ldr	r3, [pc, #220]	@ (800096c <MX_ADC2_Init+0x150>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000896:	4835      	ldr	r0, [pc, #212]	@ (800096c <MX_ADC2_Init+0x150>)
 8000898:	f000 ffa2 	bl	80017e0 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80008a2:	f000 f9a7 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <MX_ADC2_Init+0x158>)
 80008a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008aa:	2306      	movs	r3, #6
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b2:	237f      	movs	r3, #127	@ 0x7f
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b6:	2304      	movs	r3, #4
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	482a      	ldr	r0, [pc, #168]	@ (800096c <MX_ADC2_Init+0x150>)
 80008c4:	f001 f910 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80008ce:	f000 f991 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008d2:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_ADC2_Init+0x15c>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008d6:	230c      	movs	r3, #12
 80008d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_ADC2_Init+0x150>)
 80008e0:	f001 f902 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80008ea:	f000 f983 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <MX_ADC2_Init+0x160>)
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008f2:	2312      	movs	r3, #18
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	@ (800096c <MX_ADC2_Init+0x150>)
 80008fc:	f001 f8f4 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000906:	f000 f975 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_ADC2_Init+0x164>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800090e:	2318      	movs	r3, #24
 8000910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4815      	ldr	r0, [pc, #84]	@ (800096c <MX_ADC2_Init+0x150>)
 8000918:	f001 f8e6 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000922:	f000 f967 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_ADC2_Init+0x168>)
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800092a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	480d      	ldr	r0, [pc, #52]	@ (800096c <MX_ADC2_Init+0x150>)
 8000936:	f001 f8d7 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000940:	f000 f958 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_ADC2_Init+0x16c>)
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000948:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <MX_ADC2_Init+0x150>)
 8000954:	f001 f8c8 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 800095e:	f000 f949 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000a4 	.word	0x200000a4
 8000970:	50000100 	.word	0x50000100
 8000974:	0c900008 	.word	0x0c900008
 8000978:	10c00010 	.word	0x10c00010
 800097c:	14f00020 	.word	0x14f00020
 8000980:	2e300800 	.word	0x2e300800
 8000984:	36902000 	.word	0x36902000
 8000988:	47520000 	.word	0x47520000

0800098c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 8000992:	4a20      	ldr	r2, [pc, #128]	@ (8000a14 <MX_FDCAN1_Init+0x88>)
 8000994:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009bc:	2201      	movs	r2, #1
 80009be:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009c8:	220d      	movs	r2, #13
 80009ca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009da:	2201      	movs	r2, #1
 80009dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009ec:	221c      	movs	r2, #28
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_FDCAN1_Init+0x84>)
 80009fe:	f001 fff7 	bl	80029f0 <HAL_FDCAN_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a08:	f000 f8f4 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200001d0 	.word	0x200001d0
 8000a14:	40006400 	.word	0x40006400

08000a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a38:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <MX_TIM3_Init+0x98>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a3e:	220f      	movs	r2, #15
 8000a40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a5c:	4813      	ldr	r0, [pc, #76]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a5e:	f003 ff21 	bl	80048a4 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a68:	f000 f8c4 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a7a:	f004 f8b9 	bl	8004bf0 <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a84:	f000 f8b6 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a96:	f004 fb0f 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f8a8 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000234 	.word	0x20000234
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <MX_DMA_Init+0x60>)
 8000ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200b      	movs	r0, #11
 8000af0:	f001 fd8f 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000af4:	200b      	movs	r0, #11
 8000af6:	f001 fda6 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200c      	movs	r0, #12
 8000b00:	f001 fd87 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b04:	200c      	movs	r0, #12
 8000b06:	f001 fd9e 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a27      	ldr	r2, [pc, #156]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_GPIO_Init+0xd0>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b94:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0xd4>)
 8000b96:	f002 fed3 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <MX_GPIO_Init+0xd8>)
 8000ba0:	f002 fece 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	@ (8000bec <MX_GPIO_Init+0xd4>)
 8000bbe:	f002 fd3d 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000bc2:	2340      	movs	r3, #64	@ 0x40
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_GPIO_Init+0xd8>)
 8000bda:	f002 fd2f 	bl	800363c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c36:	f002 ff3f 	bl	8003ab8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09e      	sub	sp, #120	@ 0x78
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	2244      	movs	r2, #68	@ 0x44
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 faed 	bl	8005248 <memset>
  if(hadc->Instance==ADC1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c76:	f040 8082 	bne.w	8000d7e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fc1a 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c96:	f7ff ffad 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c9a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10b      	bne.n	8000cc4 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cac:	4b7a      	ldr	r3, [pc, #488]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	4a79      	ldr	r2, [pc, #484]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb8:	4b77      	ldr	r3, [pc, #476]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b74      	ldr	r3, [pc, #464]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a73      	ldr	r2, [pc, #460]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b71      	ldr	r3, [pc, #452]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC1_in2_Pin|ADC1_in3_Pin;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f002 fc97 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_in14_Pin|ADC1_in13_Pin;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d1e:	4619      	mov	r1, r3
 8000d20:	485e      	ldr	r0, [pc, #376]	@ (8000e9c <HAL_ADC_MspInit+0x254>)
 8000d22:	f002 fc8b 	bl	800363c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d26:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d28:	4a5e      	ldr	r2, [pc, #376]	@ (8000ea4 <HAL_ADC_MspInit+0x25c>)
 8000d2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d2e:	2205      	movs	r2, #5
 8000d30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b59      	ldr	r3, [pc, #356]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b58      	ldr	r3, [pc, #352]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d40:	2280      	movs	r2, #128	@ 0x80
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d44:	4b56      	ldr	r3, [pc, #344]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4c:	4b54      	ldr	r3, [pc, #336]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d54:	4b52      	ldr	r3, [pc, #328]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d60:	484f      	ldr	r0, [pc, #316]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d62:	f001 fc8b 	bl	800267c <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000d6c:	f7ff ff42 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d74:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d76:	4a4a      	ldr	r2, [pc, #296]	@ (8000ea0 <HAL_ADC_MspInit+0x258>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d7c:	e086      	b.n	8000e8c <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a49      	ldr	r2, [pc, #292]	@ (8000ea8 <HAL_ADC_MspInit+0x260>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	f040 8081 	bne.w	8000e8c <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d90:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fb92 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8000da6:	f7ff ff25 	bl	8000bf4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000daa:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a38      	ldr	r2, [pc, #224]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000db4:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <HAL_ADC_MspInit+0x24c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10b      	bne.n	8000dd4 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a35      	ldr	r2, [pc, #212]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <HAL_ADC_MspInit+0x250>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC2_in4_Pin|ADC2_in5_Pin
 8000e04:	23f3      	movs	r3, #243	@ 0xf3
 8000e06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f002 fc0f 	bl	800363c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_in8_Pin|ADC2_in15_Pin;
 8000e1e:	2330      	movs	r3, #48	@ 0x30
 8000e20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	@ (8000eac <HAL_ADC_MspInit+0x264>)
 8000e32:	f002 fc03 	bl	800363c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e38:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_ADC_MspInit+0x26c>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e3e:	2224      	movs	r2, #36	@ 0x24
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e70:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e72:	f001 fc03 	bl	800267c <HAL_DMA_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_ADC_MspInit+0x238>
      Error_Handler();
 8000e7c:	f7ff feba 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e84:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_ADC_MspInit+0x268>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	3778      	adds	r7, #120	@ 0x78
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000390 	.word	0x20000390
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	20000110 	.word	0x20000110
 8000ea4:	40020008 	.word	0x40020008
 8000ea8:	50000100 	.word	0x50000100
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	4002001c 	.word	0x4002001c

08000eb8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09a      	sub	sp, #104	@ 0x68
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2244      	movs	r2, #68	@ 0x44
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 f9b5 	bl	8005248 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_FDCAN_MspInit+0xbc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d141      	bne.n	8000f6c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ef2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fae3 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f04:	f7ff fe76 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_FDCAN_MspInit+0xc0>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f002 fb70 	bl	800363c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2015      	movs	r0, #21
 8000f62:	f001 fb56 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f66:	2015      	movs	r0, #21
 8000f68:	f001 fb6d 	bl	8002646 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3768      	adds	r7, #104	@ 0x68
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40006400 	.word	0x40006400
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201d      	movs	r0, #29
 8000fac:	f001 fb31 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb0:	201d      	movs	r0, #29
 8000fb2:	f001 fb48 	bl	8002646 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 f9c9 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA1_Channel1_IRQHandler+0x10>)
 800102e:	f001 fbcd 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000110 	.word	0x20000110

0800103c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <DMA1_Channel2_IRQHandler+0x10>)
 8001042:	f001 fbc3 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000170 	.word	0x20000170

08001050 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <FDCAN1_IT0_IRQHandler+0x10>)
 8001056:	f002 f891 	bl	800317c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001d0 	.word	0x200001d0

08001064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
		millis++;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <TIM3_IRQHandler+0x2c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <TIM3_IRQHandler+0x2c>)
 8001072:	801a      	strh	r2, [r3, #0]
		if(millis == 1000){
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <TIM3_IRQHandler+0x2c>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107c:	d102      	bne.n	8001084 <TIM3_IRQHandler+0x20>
			CAN_enable = 1;
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <TIM3_IRQHandler+0x30>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <TIM3_IRQHandler+0x34>)
 8001086:	f003 fc64 	bl	8004952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000342 	.word	0x20000342
 8001094:	20000000 	.word	0x20000000
 8001098:	20000234 	.word	0x20000234

0800109c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 80010cc:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80010d0:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	fb03 f202 	mul.w	r2, r3, r2
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <TF_3V3+0x38>)
 80010dc:	fba3 1302 	umull	r1, r3, r3, r2
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	0852      	lsrs	r2, r2, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	81bb      	strh	r3, [r7, #12]
	return voltage;
 80010ea:	89bb      	ldrh	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	00100101 	.word	0x00100101

080010fc <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 5000;
 8001108:	f241 3388 	movw	r3, #5000	@ 0x1388
 800110c:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	fb03 f202 	mul.w	r2, r3, r2
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <TF_5V+0x38>)
 8001118:	fba3 1302 	umull	r1, r3, r3, r2
 800111c:	1ad2      	subs	r2, r2, r3
 800111e:	0852      	lsrs	r2, r2, #1
 8001120:	4413      	add	r3, r2
 8001122:	0adb      	lsrs	r3, r3, #11
 8001124:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001126:	89bb      	ldrh	r3, [r7, #12]

}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00100101 	.word	0x00100101

08001138 <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw){
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 24000;
 8001144:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001148:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	fb03 f202 	mul.w	r2, r3, r2
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <TF_24V+0x38>)
 8001154:	fba3 1302 	umull	r1, r3, r3, r2
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	0852      	lsrs	r2, r2, #1
 800115c:	4413      	add	r3, r2
 800115e:	0adb      	lsrs	r3, r3, #11
 8001160:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001162:	89bb      	ldrh	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	00100101 	.word	0x00100101

08001174 <TF_BPPS>:

uint16_t bpps_global;
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 2615;
 8001184:	f640 2337 	movw	r3, #2615	@ 0xa37
 8001188:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 2925;
 800118a:	f640 336d 	movw	r3, #2925	@ 0xb6d
 800118e:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 8001190:	89bb      	ldrh	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d910      	bls.n	80011ba <TF_BPPS+0x46>
		uint16_t bpps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001198:	89bb      	ldrh	r3, [r7, #12]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	8979      	ldrh	r1, [r7, #10]
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	1a8a      	subs	r2, r1, r2
 80011aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80011ae:	813b      	strh	r3, [r7, #8]
		bpps_global = bpps;
 80011b0:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <TF_BPPS+0x54>)
 80011b2:	893b      	ldrh	r3, [r7, #8]
 80011b4:	8013      	strh	r3, [r2, #0]
		return bpps;
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	e000      	b.n	80011bc <TF_BPPS+0x48>
	}
	return 0;
 80011ba:	2300      	movs	r3, #0

}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000394 	.word	0x20000394

080011cc <TF_APPS1>:
uint16_t TF_APPS1(uint8_t bytes, uint32_t raw){
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 80011d8:	2364      	movs	r3, #100	@ 0x64
 80011da:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 650;
 80011dc:	f240 238a 	movw	r3, #650	@ 0x28a
 80011e0:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 1990;
 80011e2:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 80011e6:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 80011e8:	89bb      	ldrh	r3, [r7, #12]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d910      	bls.n	8001212 <TF_APPS1+0x46>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 80011f0:	89bb      	ldrh	r3, [r7, #12]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	8979      	ldrh	r1, [r7, #10]
 80011fe:	89ba      	ldrh	r2, [r7, #12]
 8001200:	1a8a      	subs	r2, r1, r2
 8001202:	fbb3 f3f2 	udiv	r3, r3, r2
 8001206:	813b      	strh	r3, [r7, #8]
		return 100 - apps;
 8001208:	893b      	ldrh	r3, [r7, #8]
 800120a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800120e:	b29b      	uxth	r3, r3
 8001210:	e000      	b.n	8001214 <TF_APPS1+0x48>
	}
	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <TF_APPS2>:

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw){
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 800122c:	2364      	movs	r3, #100	@ 0x64
 800122e:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 690;
 8001230:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001234:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 2130;
 8001236:	f640 0352 	movw	r3, #2130	@ 0x852
 800123a:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 800123c:	89bb      	ldrh	r3, [r7, #12]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d910      	bls.n	8001266 <TF_APPS2+0x46>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	89fa      	ldrh	r2, [r7, #14]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	8979      	ldrh	r1, [r7, #10]
 8001252:	89ba      	ldrh	r2, [r7, #12]
 8001254:	1a8a      	subs	r2, r1, r2
 8001256:	fbb3 f3f2 	udiv	r3, r3, r2
 800125a:	813b      	strh	r3, [r7, #8]
		return 100 - apps;
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001262:	b29b      	uxth	r3, r3
 8001264:	e000      	b.n	8001268 <TF_APPS2+0x48>
	}
	return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw){
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
		uint16_t max_volt = 5000;
 8001280:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001284:	81fb      	strh	r3, [r7, #14]

		uint16_t voltage = raw*max_volt / 4095;
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <TF_BTN+0x44>)
 8001290:	fba3 1302 	umull	r1, r3, r3, r2
 8001294:	1ad2      	subs	r2, r2, r3
 8001296:	0852      	lsrs	r2, r2, #1
 8001298:	4413      	add	r3, r2
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	81bb      	strh	r3, [r7, #12]

		if(voltage < 2000)
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012a4:	d201      	bcs.n	80012aa <TF_BTN+0x36>
			return 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <TF_BTN+0x38>
		else
			return 1;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	00100101 	.word	0x00100101

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff feec 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f003 ffb5 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff f937 	bl	8000560 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   r0, =_estack
 80012f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001300:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8001304:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001308:	2000039c 	.word	0x2000039c

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>

0800130e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f001 f96f 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f80e 	bl	8001340 <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff fc66 	bl	8000c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	79fb      	ldrb	r3, [r7, #7]

}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_InitTick+0x68>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d022      	beq.n	800139a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_InitTick+0x6c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_InitTick+0x68>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001360:	fbb1 f3f3 	udiv	r3, r1, r3
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f001 f97a 	bl	8002662 <HAL_SYSTICK_Config>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10f      	bne.n	8001394 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d809      	bhi.n	800138e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137a:	2200      	movs	r2, #0
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	f001 f946 	bl	8002612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_InitTick+0x70>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e007      	b.n	800139e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e004      	b.n	800139e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000004 	.word	0x20000004
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x20>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <HAL_IncTick+0x1c>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000398 	.word	0x20000398
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000398 	.word	0x20000398

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d004      	beq.n	8001414 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_Delay+0x40>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001414:	bf00      	nop
 8001416:	f7ff ffdf 	bl	80013d8 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8f7      	bhi.n	8001416 <HAL_Delay+0x26>
  {
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000000c 	.word	0x2000000c

08001434 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3360      	adds	r3, #96	@ 0x60
 80014ae:	461a      	mov	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <LL_ADC_SetOffset+0x44>)
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	03fff000 	.word	0x03fff000

080014e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3360      	adds	r3, #96	@ 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3360      	adds	r3, #96	@ 0x60
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001546:	b480      	push	{r7}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3360      	adds	r3, #96	@ 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3360      	adds	r3, #96	@ 0x60
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	615a      	str	r2, [r3, #20]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3330      	adds	r3, #48	@ 0x30
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	211f      	movs	r1, #31
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	f003 011f 	and.w	r1, r3, #31
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3314      	adds	r3, #20
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0e5b      	lsrs	r3, r3, #25
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2107      	movs	r1, #7
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	0d1b      	lsrs	r3, r3, #20
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0318 	and.w	r3, r3, #24
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016ac:	40d9      	lsrs	r1, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	400b      	ands	r3, r1
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	431a      	orrs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	0007ffff 	.word	0x0007ffff

080016d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6093      	str	r3, [r2, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001708:	d101      	bne.n	800170e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800172c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001730:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001758:	d101      	bne.n	800175e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <LL_ADC_IsEnabled+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_IsEnabled+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d101      	bne.n	80017aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e167      	b.n	8001aca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fa1d 	bl	8000c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff67 	bl	80016f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff4d 	bl	80016d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff82 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d115      	bne.n	8001872 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff66 	bl	800171c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001850:	4ba0      	ldr	r3, [pc, #640]	@ (8001ad4 <HAL_ADC_Init+0x2f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	4aa0      	ldr	r2, [pc, #640]	@ (8001ad8 <HAL_ADC_Init+0x2f8>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001864:	e002      	b.n	800186c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3b01      	subs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff64 	bl	8001744 <LL_ADC_IsInternalRegulatorEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff75 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 80018a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 8100 	bne.w	8001ab8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80fc 	bne.w	8001ab8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018c8:	f043 0202 	orr.w	r2, r3, #2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff49 	bl	800176c <LL_ADC_IsEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80018e4:	f7ff ff42 	bl	800176c <LL_ADC_IsEnabled>
 80018e8:	4604      	mov	r4, r0
 80018ea:	487c      	ldr	r0, [pc, #496]	@ (8001adc <HAL_ADC_Init+0x2fc>)
 80018ec:	f7ff ff3e 	bl	800176c <LL_ADC_IsEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4323      	orrs	r3, r4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4878      	ldr	r0, [pc, #480]	@ (8001ae0 <HAL_ADC_Init+0x300>)
 8001900:	f7ff fd98 	bl	8001434 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7f5b      	ldrb	r3, [r3, #29]
 8001908:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001914:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800191a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001922:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	045b      	lsls	r3, r3, #17
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <HAL_ADC_Init+0x304>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff14 	bl	80017b8 <LL_ADC_INJ_IsConversionOngoing>
 8001990:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d16d      	bne.n	8001a74 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d16a      	bne.n	8001a74 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6911      	ldr	r1, [r2, #16]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019fe:	e013      	b.n	8001a28 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d118      	bne.n	8001a64 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a54:	430a      	orrs	r2, r1
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e007      	b.n	8001a74 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d10c      	bne.n	8001a96 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f023 010f 	bic.w	r1, r3, #15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a94:	e007      	b.n	8001aa6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020f 	bic.w	r2, r2, #15
 8001aa4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ab6:	e007      	b.n	8001ac8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	f043 0210 	orr.w	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	@ 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	053e2d63 	.word	0x053e2d63
 8001adc:	50000100 	.word	0x50000100
 8001ae0:	50000300 	.word	0x50000300
 8001ae4:	fff04007 	.word	0xfff04007

08001ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0b6      	sub	sp, #216	@ 0xd8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x22>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e3c8      	b.n	800229c <HAL_ADC_ConfigChannel+0x7b4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe3b 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 83ad 	bne.w	800227e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f7ff fd51 	bl	80015d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe29 	bl	8001792 <LL_ADC_REG_IsConversionOngoing>
 8001b40:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe35 	bl	80017b8 <LL_ADC_INJ_IsConversionOngoing>
 8001b4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 81d9 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 81d4 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b6e:	d10f      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff fd58 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fd12 	bl	80015b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b8e:	e00e      	b.n	8001bae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f7ff fd47 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd02 	bl	80015b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d022      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6919      	ldr	r1, [r3, #16]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001be0:	f7ff fc5c 	bl	800149c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6919      	ldr	r1, [r3, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fca8 	bl	8001546 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x124>
 8001c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x126>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fcb4 	bl	800157c <LL_ADC_SetOffsetSaturation>
 8001c14:	e17b      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc61 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x15a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fc56 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	e01e      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x198>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc4b 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c70:	2320      	movs	r3, #32
 8001c72:	e004      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1b0>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	e018      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1e2>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e004      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d106      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc1a 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbfe 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x220>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fbf3 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	f003 021f 	and.w	r2, r3, #31
 8001d06:	e01e      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x25e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbe8 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d36:	2320      	movs	r3, #32
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x276>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	e018      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2a8>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fbb7 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb9b 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x2e6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fb90 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fb85 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e004      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x33c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	e016      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x36a>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e004      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d106      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb56 	bl	8001510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb3a 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x3a8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2103      	movs	r1, #3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fb2f 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 021f 	and.w	r2, r3, #31
 8001e8e:	e017      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x3d8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2103      	movs	r1, #3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb24 	bl	80014e4 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3f0>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	e011      	b.n	8001efc <HAL_ADC_ConfigChannel+0x414>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	e003      	b.n	8001efc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2103      	movs	r1, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb01 	bl	8001510 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc2a 	bl	800176c <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8140 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f7ff fbab 	bl	8001688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4a8f      	ldr	r2, [pc, #572]	@ (8002174 <HAL_ADC_ConfigChannel+0x68c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 8131 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x47e>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	bf94      	ite	ls
 8001f5e:	2301      	movls	r3, #1
 8001f60:	2300      	movhi	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	e019      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x4b2>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f76:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d079      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x4d2>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fb8:	e015      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x4fe>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	069b      	lsls	r3, r3, #26
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x51e>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	e017      	b.n	8002036 <HAL_ADC_ConfigChannel+0x54e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002016:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	ea42 0103 	orr.w	r1, r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_ADC_ConfigChannel+0x574>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	e018      	b.n	800208e <HAL_ADC_ConfigChannel+0x5a6>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800206e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208e:	430b      	orrs	r3, r1
 8002090:	e081      	b.n	8002196 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x5c6>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ac:	e015      	b.n	80020da <HAL_ADC_ConfigChannel+0x5f2>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e003      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x612>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	e017      	b.n	800212a <HAL_ADC_ConfigChannel+0x642>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	61fb      	str	r3, [r7, #28]
  return result;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	ea42 0103 	orr.w	r1, r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x66e>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0e9b      	lsrs	r3, r3, #26
 8002140:	3301      	adds	r3, #1
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002154:	e01e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x6ac>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	613b      	str	r3, [r7, #16]
  return result;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e006      	b.n	8002180 <HAL_ADC_ConfigChannel+0x698>
 8002172:	bf00      	nop
 8002174:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f003 021f 	and.w	r2, r3, #31
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3b1e      	subs	r3, #30
 800218e:	051b      	lsls	r3, r3, #20
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002194:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff fa48 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b3f      	ldr	r3, [pc, #252]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7bc>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d071      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ac:	483e      	ldr	r0, [pc, #248]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ae:	f7ff f967 	bl	8001480 <LL_ADC_GetCommonPathInternalCh>
 80021b2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	@ (80022ac <HAL_ADC_ConfigChannel+0x7c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x6e2>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	@ (80022b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d127      	bne.n	800221a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d121      	bne.n	800221a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021de:	d157      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021e8:	4619      	mov	r1, r3
 80021ea:	482f      	ldr	r0, [pc, #188]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ec:	f7ff f935 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a30      	ldr	r2, [pc, #192]	@ (80022b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800220a:	e002      	b.n	8002212 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3b01      	subs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002218:	e03a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_ADC_ConfigChannel+0x7d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d113      	bne.n	800224c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02a      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002242:	4619      	mov	r1, r3
 8002244:	4818      	ldr	r0, [pc, #96]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002246:	f7ff f908 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224a:	e021      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11c      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800225a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d011      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800226c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002274:	4619      	mov	r1, r3
 8002276:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002278:	f7ff f8ef 	bl	800145a <LL_ADC_SetCommonPathInternalCh>
 800227c:	e008      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002298:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800229c:	4618      	mov	r0, r3
 800229e:	37d8      	adds	r7, #216	@ 0xd8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	80080000 	.word	0x80080000
 80022a8:	50000300 	.word	0x50000300
 80022ac:	c3210000 	.word	0xc3210000
 80022b0:	90c00010 	.word	0x90c00010
 80022b4:	20000004 	.word	0x20000004
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	c7520000 	.word	0xc7520000
 80022c0:	50000100 	.word	0x50000100
 80022c4:	cb840000 	.word	0xcb840000

080022c8 <LL_ADC_IsEnabled>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsEnabled+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsEnabled+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsConversionOngoing>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b0a1      	sub	sp, #132	@ 0x84
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800232e:	2302      	movs	r3, #2
 8002330:	e08b      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800233a:	2300      	movs	r3, #0
 800233c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800233e:	2300      	movs	r3, #0
 8002340:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234a:	d102      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800234c:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e001      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e06a      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffb9 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 800237c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffb3 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14c      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800238e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002390:	2b00      	cmp	r3, #0
 8002392:	d149      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002396:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d028      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023b2:	035b      	lsls	r3, r3, #13
 80023b4:	430b      	orrs	r3, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023c0:	f7ff ff82 	bl	80022c8 <LL_ADC_IsEnabled>
 80023c4:	4604      	mov	r4, r0
 80023c6:	4823      	ldr	r0, [pc, #140]	@ (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023c8:	f7ff ff7e 	bl	80022c8 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d133      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023f0:	e024      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002402:	f7ff ff61 	bl	80022c8 <LL_ADC_IsEnabled>
 8002406:	4604      	mov	r4, r0
 8002408:	4812      	ldr	r0, [pc, #72]	@ (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800240a:	f7ff ff5d 	bl	80022c8 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	4323      	orrs	r3, r4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002424:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e009      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800243a:	e000      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800243c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002446:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800244a:	4618      	mov	r0, r3
 800244c:	3784      	adds	r7, #132	@ 0x84
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	50000100 	.word	0x50000100
 8002458:	50000300 	.word	0x50000300

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4907      	ldr	r1, [pc, #28]	@ (80024f8 <__NVIC_EnableIRQ+0x38>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	@ (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	@ (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	@ 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff8e 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff29 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff40 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff90 	bl	8002550 <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5f 	bl	80024fc <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff33 	bl	80024c0 <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa4 	bl	80025b8 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e08d      	b.n	80027aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_DMA_Init+0x138>)
 8002696:	429a      	cmp	r2, r3
 8002698:	d80f      	bhi.n	80026ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	4b45      	ldr	r3, [pc, #276]	@ (80027b8 <HAL_DMA_Init+0x13c>)
 80026a2:	4413      	add	r3, r2
 80026a4:	4a45      	ldr	r2, [pc, #276]	@ (80027bc <HAL_DMA_Init+0x140>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	009a      	lsls	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a42      	ldr	r2, [pc, #264]	@ (80027c0 <HAL_DMA_Init+0x144>)
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b8:	e00e      	b.n	80026d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_DMA_Init+0x148>)
 80026c2:	4413      	add	r3, r2
 80026c4:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <HAL_DMA_Init+0x140>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	009a      	lsls	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	@ (80027c8 <HAL_DMA_Init+0x14c>)
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8fe 	bl	800292c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002738:	d102      	bne.n	8002740 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002754:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_DMA_Init+0x104>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d80c      	bhi.n	8002780 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f91e 	bl	80029a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e008      	b.n	8002792 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020407 	.word	0x40020407
 80027b8:	bffdfff8 	.word	0xbffdfff8
 80027bc:	cccccccd 	.word	0xcccccccd
 80027c0:	40020000 	.word	0x40020000
 80027c4:	bffdfbf8 	.word	0xbffdfbf8
 80027c8:	40020400 	.word	0x40020400

080027cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2204      	movs	r2, #4
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d026      	beq.n	8002846 <HAL_DMA_IRQHandler+0x7a>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d021      	beq.n	8002846 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	2104      	movs	r1, #4
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d071      	beq.n	8002920 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002844:	e06c      	b.n	8002920 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2202      	movs	r2, #2
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02e      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d029      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020a 	bic.w	r2, r2, #10
 8002880:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2102      	movs	r1, #2
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d038      	beq.n	8002920 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028b6:	e033      	b.n	8002920 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2208      	movs	r2, #8
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02a      	beq.n	8002922 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d025      	beq.n	8002922 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 020e 	bic.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002920:	bf00      	nop
 8002922:	bf00      	nop
}
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800293c:	429a      	cmp	r2, r3
 800293e:	d802      	bhi.n	8002946 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e001      	b.n	800294a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002948:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3b08      	subs	r3, #8
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a0b      	ldr	r2, [pc, #44]	@ (80029a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002976:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2201      	movs	r2, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40020407 	.word	0x40020407
 8002998:	40020800 	.word	0x40020800
 800299c:	40020820 	.word	0x40020820
 80029a0:	cccccccd 	.word	0xcccccccd
 80029a4:	40020880 	.word	0x40020880

080029a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a08      	ldr	r2, [pc, #32]	@ (80029ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	1000823f 	.word	0x1000823f
 80029ec:	40020940 	.word	0x40020940

080029f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e147      	b.n	8002c92 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fa4e 	bl	8000eb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7fe fcd4 	bl	80013d8 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a32:	e012      	b.n	8002a5a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a34:	f7fe fcd0 	bl	80013d8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d90b      	bls.n	8002a5a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e11b      	b.n	8002c92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d0e5      	beq.n	8002a34 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a78:	f7fe fcae 	bl	80013d8 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a7e:	e012      	b.n	8002aa6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a80:	f7fe fcaa 	bl	80013d8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d90b      	bls.n	8002aa6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0f5      	b.n	8002c92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0e5      	beq.n	8002a80 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0202 	orr.w	r2, r2, #2
 8002ac2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a74      	ldr	r2, [pc, #464]	@ (8002c9c <HAL_FDCAN_Init+0x2ac>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d103      	bne.n	8002ad6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002ace:	4a74      	ldr	r2, [pc, #464]	@ (8002ca0 <HAL_FDCAN_Init+0x2b0>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7c1b      	ldrb	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aec:	619a      	str	r2, [r3, #24]
 8002aee:	e007      	b.n	8002b00 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002afe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7c5b      	ldrb	r3, [r3, #17]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b16:	619a      	str	r2, [r3, #24]
 8002b18:	e007      	b.n	8002b2a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b28:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7c9b      	ldrb	r3, [r3, #18]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b40:	619a      	str	r2, [r3, #24]
 8002b42:	e007      	b.n	8002b54 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b52:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002b78:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0210 	bic.w	r2, r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0204 	orr.w	r2, r2, #4
 8002ba0:	619a      	str	r2, [r3, #24]
 8002ba2:	e02c      	b.n	8002bfe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d028      	beq.n	8002bfe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d01c      	beq.n	8002bee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0210 	orr.w	r2, r2, #16
 8002bd2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d110      	bne.n	8002bfe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	e007      	b.n	8002bfe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0220 	orr.w	r2, r2, #32
 8002bfc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c0e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c26:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c28:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c32:	d115      	bne.n	8002c60 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c42:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c4c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	3b01      	subs	r3, #1
 8002c56:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c5c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c5e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fc0e 	bl	8003498 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40006400 	.word	0x40006400
 8002ca0:	40006500 	.word	0x40006500

08002ca4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d110      	bne.n	8002cda <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e006      	b.n	8002ce8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d12c      	bne.n	8002d66 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e023      	b.n	8002d74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fbfe 	bl	8003544 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e006      	b.n	8002d74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f043 0208 	orr.w	r2, r3, #8
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b08b      	sub	sp, #44	@ 0x2c
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d94:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002d96:	7efb      	ldrb	r3, [r7, #27]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f040 80e8 	bne.w	8002f6e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b40      	cmp	r3, #64	@ 0x40
 8002da2:	d137      	bne.n	8002e14 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0db      	b.n	8002f7c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dcc:	0e1b      	lsrs	r3, r3, #24
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d10a      	bne.n	8002dec <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dde:	0a5b      	lsrs	r3, r3, #9
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	e036      	b.n	8002e82 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0a3      	b.n	8002f7c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e3c:	0e1b      	lsrs	r3, r3, #24
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10a      	bne.n	8002e5c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d107      	bne.n	8002ea6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0c9b      	lsrs	r3, r3, #18
 8002e9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	3304      	adds	r3, #4
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0fda      	lsrs	r2, r3, #31
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	e00a      	b.n	8002f3e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	440b      	add	r3, r1
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	461a      	mov	r2, r3
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d3ec      	bcc.n	8002f28 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b40      	cmp	r3, #64	@ 0x40
 8002f52:	d105      	bne.n	8002f60 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002f5e:	e004      	b.n	8002f6a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e006      	b.n	8002f7c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	372c      	adds	r7, #44	@ 0x2c
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	080052d0 	.word	0x080052d0

08002f8c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fc2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d003      	beq.n	8002fd2 <HAL_FDCAN_ActivateNotification+0x22>
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f040 80c8 	bne.w	8003162 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03b      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d031      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d027      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01d      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d013      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00c      	beq.n	8003076 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d107      	bne.n	8003076 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d13b      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d131      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d127      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11d      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d113      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0202 	orr.w	r2, r2, #2
 8003110:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	430a      	orrs	r2, r1
 800312c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	430a      	orrs	r2, r1
 800314a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e006      	b.n	8003170 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	@ 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003198:	4013      	ands	r3, r2
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b0:	4013      	ands	r3, r2
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	4013      	ands	r3, r2
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80031d6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	6a3a      	ldr	r2, [r7, #32]
 80031e0:	4013      	ands	r3, r2
 80031e2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80031ee:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f916 	bl	800345a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d019      	beq.n	800326c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d014      	beq.n	800326c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800324a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003262:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8d8 	bl	800341c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800327a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8a2 	bl	80033c6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd f932 	bl	80004fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80032a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f897 	bl	80033dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00c      	beq.n	80032d2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f890 	bl	80033f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d013      	beq.n	800330e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032ee:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2280      	movs	r2, #128	@ 0x80
 8003304:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003306:	68f9      	ldr	r1, [r7, #12]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f87c 	bl	8003406 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800332a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f880 	bl	8003432 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800334e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f878 	bl	8003446 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003372:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003378:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800338e:	69f9      	ldr	r1, [r7, #28]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f876 	bl	8003482 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f858 	bl	800346e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	@ 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80034a0:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80034a2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034b2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	061a      	lsls	r2, r3, #24
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e005      	b.n	8003526 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3304      	adds	r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	429a      	cmp	r2, r3
 8003530:	d3f3      	bcc.n	800351a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	4000a400 	.word	0x4000a400

08003544 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003562:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800356a:	4313      	orrs	r3, r2
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	e00a      	b.n	8003586 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003578:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800357e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003584:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003590:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003596:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800359c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3304      	adds	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	3304      	adds	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e020      	b.n	800361a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3303      	adds	r3, #3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3302      	adds	r3, #2
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	440b      	add	r3, r1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80035f0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	440b      	add	r3, r1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80035fe:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	440a      	add	r2, r1
 8003606:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003608:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3304      	adds	r3, #4
 8003612:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3304      	adds	r3, #4
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <FDCAN_CopyMessageToRAM+0xf4>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	461a      	mov	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4293      	cmp	r3, r2
 8003628:	d3d6      	bcc.n	80035d8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3724      	adds	r7, #36	@ 0x24
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	080052d0 	.word	0x080052d0

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800364a:	e15a      	b.n	8003902 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	4013      	ands	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 814c 	beq.w	80038fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d005      	beq.n	800367c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003678:	2b02      	cmp	r3, #2
 800367a:	d130      	bne.n	80036de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036b2:	2201      	movs	r2, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0201 	and.w	r2, r3, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d017      	beq.n	800371a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d123      	bne.n	800376e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	08da      	lsrs	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3208      	adds	r2, #8
 800372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0203 	and.w	r2, r3, #3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003920 <HAL_GPIO_Init+0x2e4>)
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003920 <HAL_GPIO_Init+0x2e4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80037bc:	4b58      	ldr	r3, [pc, #352]	@ (8003920 <HAL_GPIO_Init+0x2e4>)
 80037be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c8:	4a56      	ldr	r2, [pc, #344]	@ (8003924 <HAL_GPIO_Init+0x2e8>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037f2:	d01f      	beq.n	8003834 <HAL_GPIO_Init+0x1f8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003928 <HAL_GPIO_Init+0x2ec>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d019      	beq.n	8003830 <HAL_GPIO_Init+0x1f4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a4b      	ldr	r2, [pc, #300]	@ (800392c <HAL_GPIO_Init+0x2f0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_GPIO_Init+0x1f0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a4a      	ldr	r2, [pc, #296]	@ (8003930 <HAL_GPIO_Init+0x2f4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00d      	beq.n	8003828 <HAL_GPIO_Init+0x1ec>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a49      	ldr	r2, [pc, #292]	@ (8003934 <HAL_GPIO_Init+0x2f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <HAL_GPIO_Init+0x1e8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a48      	ldr	r2, [pc, #288]	@ (8003938 <HAL_GPIO_Init+0x2fc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_GPIO_Init+0x1e4>
 800381c:	2305      	movs	r3, #5
 800381e:	e00a      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003820:	2306      	movs	r3, #6
 8003822:	e008      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003824:	2304      	movs	r3, #4
 8003826:	e006      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003828:	2303      	movs	r3, #3
 800382a:	e004      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 800382c:	2302      	movs	r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003834:	2300      	movs	r3, #0
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	f002 0203 	and.w	r2, r2, #3
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	4093      	lsls	r3, r2
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003846:	4937      	ldr	r1, [pc, #220]	@ (8003924 <HAL_GPIO_Init+0x2e8>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003854:	4b39      	ldr	r3, [pc, #228]	@ (800393c <HAL_GPIO_Init+0x300>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003878:	4a30      	ldr	r2, [pc, #192]	@ (800393c <HAL_GPIO_Init+0x300>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387e:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <HAL_GPIO_Init+0x300>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a2:	4a26      	ldr	r2, [pc, #152]	@ (800393c <HAL_GPIO_Init+0x300>)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <HAL_GPIO_Init+0x300>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_GPIO_Init+0x300>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <HAL_GPIO_Init+0x300>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f6:	4a11      	ldr	r2, [pc, #68]	@ (800393c <HAL_GPIO_Init+0x300>)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f ae9d 	bne.w	800364c <HAL_GPIO_Init+0x10>
  }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40021000 	.word	0x40021000
 8003924:	40010000 	.word	0x40010000
 8003928:	48000400 	.word	0x48000400
 800392c:	48000800 	.word	0x48000800
 8003930:	48000c00 	.word	0x48000c00
 8003934:	48001000 	.word	0x48001000
 8003938:	48001400 	.word	0x48001400
 800393c:	40010400 	.word	0x40010400

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800395c:	e002      	b.n	8003964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d141      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800397e:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d131      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800398c:	4b47      	ldr	r3, [pc, #284]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003992:	4a46      	ldr	r2, [pc, #280]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800399c:	4b43      	ldr	r3, [pc, #268]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039a4:	4a41      	ldr	r2, [pc, #260]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ac:	4b40      	ldr	r3, [pc, #256]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2232      	movs	r2, #50	@ 0x32
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	e002      	b.n	80039ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ca:	4b38      	ldr	r3, [pc, #224]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d102      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f2      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039de:	4b33      	ldr	r3, [pc, #204]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ea:	d158      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e057      	b.n	8003aa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f0:	4b2e      	ldr	r3, [pc, #184]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f6:	4a2d      	ldr	r2, [pc, #180]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a00:	e04d      	b.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a08:	d141      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0a:	4b28      	ldr	r3, [pc, #160]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d131      	bne.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a18:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1e:	4a23      	ldr	r2, [pc, #140]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a28:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2232      	movs	r2, #50	@ 0x32
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	0c9b      	lsrs	r3, r3, #18
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4e:	e002      	b.n	8003a56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d102      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f2      	bne.n	8003a50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d112      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e011      	b.n	8003aa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a8c:	e007      	b.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a8e:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a96:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	20000004 	.word	0x20000004
 8003ab4:	431bde83 	.word	0x431bde83

08003ab8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac6:	6093      	str	r3, [r2, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40007000 	.word	0x40007000

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e2fe      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d075      	beq.n	8003be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af6:	4b97      	ldr	r3, [pc, #604]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b00:	4b94      	ldr	r3, [pc, #592]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d102      	bne.n	8003b16 <HAL_RCC_OscConfig+0x3e>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_OscConfig+0x44>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	4b8d      	ldr	r3, [pc, #564]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d157      	bne.n	8003be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e2d9      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x74>
 8003b3e:	4b85      	ldr	r3, [pc, #532]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a84      	ldr	r2, [pc, #528]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b7f      	ldr	r3, [pc, #508]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b7c      	ldr	r3, [pc, #496]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7b      	ldr	r2, [pc, #492]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b70:	4b78      	ldr	r3, [pc, #480]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a77      	ldr	r2, [pc, #476]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b75      	ldr	r3, [pc, #468]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a74      	ldr	r2, [pc, #464]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fc22 	bl	80013d8 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fd fc1e 	bl	80013d8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e29e      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003baa:	4b6a      	ldr	r3, [pc, #424]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xc0>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fc0e 	bl	80013d8 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fc0a 	bl	80013d8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e28a      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd2:	4b60      	ldr	r3, [pc, #384]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xe8>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bee:	4b59      	ldr	r3, [pc, #356]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf8:	4b56      	ldr	r3, [pc, #344]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_OscConfig+0x136>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCC_OscConfig+0x13c>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	4b4f      	ldr	r3, [pc, #316]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x154>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e25d      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	4946      	ldr	r1, [pc, #280]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c40:	4b45      	ldr	r3, [pc, #276]	@ (8003d58 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fb7b 	bl	8001340 <HAL_InitTick>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d043      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e249      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d023      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3c      	ldr	r2, [pc, #240]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fbb6 	bl	80013d8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fd fbb2 	bl	80013d8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e232      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	492d      	ldr	r1, [pc, #180]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
 8003ca2:	e01a      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fb92 	bl	80013d8 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fd fb8e 	bl	80013d8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e20e      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1e0>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d041      	beq.n	8003d6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b19      	ldr	r3, [pc, #100]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf4:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fd fb6b 	bl	80013d8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fd fb67 	bl	80013d8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1e7      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d18:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0ef      	beq.n	8003d06 <HAL_RCC_OscConfig+0x22e>
 8003d26:	e020      	b.n	8003d6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d28:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2e:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fb4e 	bl	80013d8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3e:	e00d      	b.n	8003d5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd fb4a 	bl	80013d8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d906      	bls.n	8003d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1ca      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ea      	bne.n	8003d40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a6 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d7c:	4b84      	ldr	r3, [pc, #528]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x2b4>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x2b6>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b7f      	ldr	r3, [pc, #508]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4a7e      	ldr	r2, [pc, #504]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003daa:	2301      	movs	r3, #1
 8003dac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	4b79      	ldr	r3, [pc, #484]	@ (8003f94 <HAL_RCC_OscConfig+0x4bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d118      	bne.n	8003dec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dba:	4b76      	ldr	r3, [pc, #472]	@ (8003f94 <HAL_RCC_OscConfig+0x4bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	@ (8003f94 <HAL_RCC_OscConfig+0x4bc>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd fb07 	bl	80013d8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fd fb03 	bl	80013d8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e183      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f94 <HAL_RCC_OscConfig+0x4bc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d108      	bne.n	8003e06 <HAL_RCC_OscConfig+0x32e>
 8003df4:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e04:	e024      	b.n	8003e50 <HAL_RCC_OscConfig+0x378>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d110      	bne.n	8003e30 <HAL_RCC_OscConfig+0x358>
 8003e0e:	4b60      	ldr	r3, [pc, #384]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e14:	4a5e      	ldr	r2, [pc, #376]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e24:	4a5a      	ldr	r2, [pc, #360]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2e:	e00f      	b.n	8003e50 <HAL_RCC_OscConfig+0x378>
 8003e30:	4b57      	ldr	r3, [pc, #348]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	4a56      	ldr	r2, [pc, #344]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e40:	4b53      	ldr	r3, [pc, #332]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	4a52      	ldr	r2, [pc, #328]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd fabe 	bl	80013d8 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd faba 	bl	80013d8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e138      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	4b46      	ldr	r3, [pc, #280]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ed      	beq.n	8003e60 <HAL_RCC_OscConfig+0x388>
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd faa7 	bl	80013d8 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd faa3 	bl	80013d8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e121      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ed      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb8:	4b35      	ldr	r3, [pc, #212]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	4a34      	ldr	r2, [pc, #208]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d03c      	beq.n	8003f4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ede:	4a2c      	ldr	r2, [pc, #176]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fa76 	bl	80013d8 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef0:	f7fd fa72 	bl	80013d8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0f2      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ef      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x418>
 8003f10:	e01b      	b.n	8003f4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f12:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fa59 	bl	80013d8 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f2a:	f7fd fa55 	bl	80013d8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0d5      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ef      	bne.n	8003f2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80c9 	beq.w	80040e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f54:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	f000 8083 	beq.w	8004068 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d15e      	bne.n	8004028 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <HAL_RCC_OscConfig+0x4b8>)
 8003f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fd fa2f 	bl	80013d8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7c:	e00c      	b.n	8003f98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd fa2b 	bl	80013d8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d905      	bls.n	8003f98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0ab      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f98:	4b55      	ldr	r3, [pc, #340]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ec      	bne.n	8003f7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa4:	4b52      	ldr	r3, [pc, #328]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b52      	ldr	r3, [pc, #328]	@ (80040f4 <HAL_RCC_OscConfig+0x61c>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a11      	ldr	r1, [r2, #32]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fbe:	0212      	lsls	r2, r2, #8
 8003fc0:	4311      	orrs	r1, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fc6:	0852      	lsrs	r2, r2, #1
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	0552      	lsls	r2, r2, #21
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0652      	lsls	r2, r2, #25
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fde:	06d2      	lsls	r2, r2, #27
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4943      	ldr	r1, [pc, #268]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b41      	ldr	r3, [pc, #260]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a40      	ldr	r2, [pc, #256]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd f9ea 	bl	80013d8 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd f9e6 	bl	80013d8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e066      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401a:	4b35      	ldr	r3, [pc, #212]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x530>
 8004026:	e05e      	b.n	80040e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a30      	ldr	r2, [pc, #192]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd f9d0 	bl	80013d8 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd f9cc 	bl	80013d8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e04c      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404e:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800405a:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	4924      	ldr	r1, [pc, #144]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <HAL_RCC_OscConfig+0x620>)
 8004062:	4013      	ands	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]
 8004066:	e03e      	b.n	80040e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e039      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004074:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCC_OscConfig+0x618>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	429a      	cmp	r2, r3
 8004086:	d12c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	3b01      	subs	r3, #1
 8004094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d123      	bne.n	80040e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11b      	bne.n	80040e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d113      	bne.n	80040e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	3b01      	subs	r3, #1
 80040c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	3b01      	subs	r3, #1
 80040dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	019f800c 	.word	0x019f800c
 80040f8:	feeefffc 	.word	0xfeeefffc

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e11e      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b91      	ldr	r3, [pc, #580]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b8e      	ldr	r3, [pc, #568]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 020f 	bic.w	r2, r3, #15
 800412a:	498c      	ldr	r1, [pc, #560]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b8a      	ldr	r3, [pc, #552]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e106      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d073      	beq.n	8004238 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d129      	bne.n	80041ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004158:	4b81      	ldr	r3, [pc, #516]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0f4      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004168:	f000 f966 	bl	8004438 <RCC_GetSysClockFreqFromPLLSource>
 800416c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4a7c      	ldr	r2, [pc, #496]	@ (8004364 <HAL_RCC_ClockConfig+0x268>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d93f      	bls.n	80041f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004176:	4b7a      	ldr	r3, [pc, #488]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d033      	beq.n	80041f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004192:	2b00      	cmp	r3, #0
 8004194:	d12f      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004196:	4b72      	ldr	r3, [pc, #456]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419e:	4a70      	ldr	r2, [pc, #448]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e024      	b.n	80041f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0c6      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c4:	4b66      	ldr	r3, [pc, #408]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0be      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041d4:	f000 f8ce 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4a61      	ldr	r2, [pc, #388]	@ (8004364 <HAL_RCC_ClockConfig+0x268>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d909      	bls.n	80041f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4957      	ldr	r1, [pc, #348]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fd f8e6 	bl	80013d8 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fd f8e2 	bl	80013d8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e095      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b4e      	ldr	r3, [pc, #312]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d023      	beq.n	800428c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a42      	ldr	r2, [pc, #264]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004256:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800425a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004268:	4b3d      	ldr	r3, [pc, #244]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004270:	4a3b      	ldr	r2, [pc, #236]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004272:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004276:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4936      	ldr	r1, [pc, #216]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	e008      	b.n	800429e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d105      	bne.n	800429e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004292:	4b33      	ldr	r3, [pc, #204]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4a32      	ldr	r2, [pc, #200]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004298:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800429c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b2f      	ldr	r3, [pc, #188]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d21d      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 020f 	bic.w	r2, r3, #15
 80042b4:	4929      	ldr	r1, [pc, #164]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042bc:	f7fd f88c 	bl	80013d8 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd f888 	bl	80013d8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e03b      	b.n	8004352 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	@ (800435c <HAL_RCC_ClockConfig+0x260>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1ed      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4917      	ldr	r1, [pc, #92]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004312:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	490f      	ldr	r1, [pc, #60]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004326:	f000 f825 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 800432a:	4602      	mov	r2, r0
 800432c:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <HAL_RCC_ClockConfig+0x264>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	490c      	ldr	r1, [pc, #48]	@ (8004368 <HAL_RCC_ClockConfig+0x26c>)
 8004338:	5ccb      	ldrb	r3, [r1, r3]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <HAL_RCC_ClockConfig+0x270>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004346:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <HAL_RCC_ClockConfig+0x274>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fff8 	bl	8001340 <HAL_InitTick>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40022000 	.word	0x40022000
 8004360:	40021000 	.word	0x40021000
 8004364:	04c4b400 	.word	0x04c4b400
 8004368:	080052c0 	.word	0x080052c0
 800436c:	20000004 	.word	0x20000004
 8004370:	20000008 	.word	0x20000008

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800437a:	4b2c      	ldr	r3, [pc, #176]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b04      	cmp	r3, #4
 8004384:	d102      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004386:	4b2a      	ldr	r3, [pc, #168]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e047      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800438c:	4b27      	ldr	r3, [pc, #156]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d102      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004398:	4b26      	ldr	r3, [pc, #152]	@ (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e03e      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800439e:	4b23      	ldr	r3, [pc, #140]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d136      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b4:	4b1d      	ldr	r3, [pc, #116]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3301      	adds	r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	4a16      	ldr	r2, [pc, #88]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	0a12      	lsrs	r2, r2, #8
 80043d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]
      break;
 80043e0:	e00c      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e2:	4a13      	ldr	r2, [pc, #76]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4a10      	ldr	r2, [pc, #64]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	0a12      	lsrs	r2, r2, #8
 80043f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
      break;
 80043fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0e5b      	lsrs	r3, r3, #25
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	e001      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800441c:	693b      	ldr	r3, [r7, #16]
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	00f42400 	.word	0x00f42400
 8004434:	007a1200 	.word	0x007a1200

08004438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d10c      	bne.n	8004476 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800445c:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	4a14      	ldr	r2, [pc, #80]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004466:	68d2      	ldr	r2, [r2, #12]
 8004468:	0a12      	lsrs	r2, r2, #8
 800446a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	617b      	str	r3, [r7, #20]
    break;
 8004474:	e00c      	b.n	8004490 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004476:	4a12      	ldr	r2, [pc, #72]	@ (80044c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4a0e      	ldr	r2, [pc, #56]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	0a12      	lsrs	r2, r2, #8
 8004484:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    break;
 800448e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004490:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0e5b      	lsrs	r3, r3, #25
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	3301      	adds	r3, #1
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044aa:	687b      	ldr	r3, [r7, #4]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40021000 	.word	0x40021000
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	00f42400 	.word	0x00f42400

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044d0:	2300      	movs	r3, #0
 80044d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8098 	beq.w	8004612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	4b40      	ldr	r3, [pc, #256]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f6:	4a3f      	ldr	r2, [pc, #252]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fe:	4b3d      	ldr	r3, [pc, #244]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450e:	4b3a      	ldr	r3, [pc, #232]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a39      	ldr	r2, [pc, #228]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451a:	f7fc ff5d 	bl	80013d8 <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004520:	e009      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fc ff59 	bl	80013d8 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	74fb      	strb	r3, [r7, #19]
        break;
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004536:	4b30      	ldr	r3, [pc, #192]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ef      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d159      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004548:	4b2a      	ldr	r3, [pc, #168]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004552:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	d019      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004564:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004580:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004590:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fc ff19 	bl	80013d8 <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a8:	e00b      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fc ff15 	bl	80013d8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d902      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	74fb      	strb	r3, [r7, #19]
            break;
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c2:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ec      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d6:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	4903      	ldr	r1, [pc, #12]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045ec:	e008      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	74bb      	strb	r3, [r7, #18]
 80045f2:	e005      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004600:	7c7b      	ldrb	r3, [r7, #17]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4ba6      	ldr	r3, [pc, #664]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	4aa5      	ldr	r2, [pc, #660]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461e:	4ba0      	ldr	r3, [pc, #640]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	f023 0203 	bic.w	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	499c      	ldr	r1, [pc, #624]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004640:	4b97      	ldr	r3, [pc, #604]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	f023 020c 	bic.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4994      	ldr	r1, [pc, #592]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004662:	4b8f      	ldr	r3, [pc, #572]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	498b      	ldr	r1, [pc, #556]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004684:	4b86      	ldr	r3, [pc, #536]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	4983      	ldr	r1, [pc, #524]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a6:	4b7e      	ldr	r3, [pc, #504]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	497a      	ldr	r1, [pc, #488]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c8:	4b75      	ldr	r3, [pc, #468]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	4972      	ldr	r1, [pc, #456]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ea:	4b6d      	ldr	r3, [pc, #436]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4969      	ldr	r1, [pc, #420]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470c:	4b64      	ldr	r3, [pc, #400]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	4961      	ldr	r1, [pc, #388]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472e:	4b5c      	ldr	r3, [pc, #368]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	4958      	ldr	r1, [pc, #352]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004750:	4b53      	ldr	r3, [pc, #332]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	4950      	ldr	r1, [pc, #320]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b4b      	ldr	r3, [pc, #300]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a4a      	ldr	r2, [pc, #296]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004788:	4b45      	ldr	r3, [pc, #276]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	4942      	ldr	r1, [pc, #264]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b3d      	ldr	r3, [pc, #244]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a3c      	ldr	r2, [pc, #240]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047c0:	4b37      	ldr	r3, [pc, #220]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	4934      	ldr	r1, [pc, #208]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b2f      	ldr	r3, [pc, #188]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a2e      	ldr	r2, [pc, #184]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f8:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	4926      	ldr	r1, [pc, #152]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004818:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a20      	ldr	r2, [pc, #128]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004830:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	4918      	ldr	r1, [pc, #96]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a12      	ldr	r2, [pc, #72]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004868:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	490a      	ldr	r1, [pc, #40]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a04      	ldr	r2, [pc, #16]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004892:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004894:	7cbb      	ldrb	r3, [r7, #18]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e049      	b.n	800494a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fb56 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fab0 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01b      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0202 	mvn.w	r2, #2
 8004986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa35 	bl	8004e0c <HAL_TIM_IC_CaptureCallback>
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa27 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa38 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0204 	mvn.w	r2, #4
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa0f 	bl	8004e0c <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa01 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa12 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01b      	beq.n	8004a4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0208 	mvn.w	r2, #8
 8004a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2204      	movs	r2, #4
 8004a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9e9 	bl	8004e0c <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9db 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9ec 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0210 	mvn.w	r2, #16
 8004a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f9c3 	bl	8004e0c <HAL_TIM_IC_CaptureCallback>
 8004a86:	e005      	b.n	8004a94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f9b5 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9c6 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0201 	mvn.w	r2, #1
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f993 	bl	8004de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb72 	bl	80051d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fb6a 	bl	80051e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f980 	bl	8004e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0220 	mvn.w	r2, #32
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb32 	bl	80051bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fb3e 	bl	80051f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fb36 	bl	800520c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fb2e 	bl	8005220 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fb26 	bl	8005234 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e0de      	b.n	8004dca <HAL_TIM_ConfigClockSource+0x1da>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a63      	ldr	r2, [pc, #396]	@ (8004dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f000 80a9 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004c4c:	4a61      	ldr	r2, [pc, #388]	@ (8004dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f200 80ae 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c54:	4a60      	ldr	r2, [pc, #384]	@ (8004dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f000 80a1 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f200 80a6 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c64:	4a5d      	ldr	r2, [pc, #372]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f000 8099 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f200 809e 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c74:	4a5a      	ldr	r2, [pc, #360]	@ (8004de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f000 8091 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004c7c:	4a58      	ldr	r2, [pc, #352]	@ (8004de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	f200 8096 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c88:	f000 8089 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004c8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c90:	f200 808e 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c98:	d03e      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0x128>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c9e:	f200 8087 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	f000 8086 	beq.w	8004db6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cae:	d87f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cb0:	2b70      	cmp	r3, #112	@ 0x70
 8004cb2:	d01a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0xfa>
 8004cb4:	2b70      	cmp	r3, #112	@ 0x70
 8004cb6:	d87b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cb8:	2b60      	cmp	r3, #96	@ 0x60
 8004cba:	d050      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x16e>
 8004cbc:	2b60      	cmp	r3, #96	@ 0x60
 8004cbe:	d877      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cc0:	2b50      	cmp	r3, #80	@ 0x50
 8004cc2:	d03c      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x14e>
 8004cc4:	2b50      	cmp	r3, #80	@ 0x50
 8004cc6:	d873      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d058      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x18e>
 8004ccc:	2b40      	cmp	r3, #64	@ 0x40
 8004cce:	d86f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cd0:	2b30      	cmp	r3, #48	@ 0x30
 8004cd2:	d064      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004cd4:	2b30      	cmp	r3, #48	@ 0x30
 8004cd6:	d86b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d060      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d867      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d05a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ce8:	e062      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	f000 f9bd 	bl	8005078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e04f      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	f000 f9a6 	bl	8005078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
      break;
 8004d3c:	e03c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 f918 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2150      	movs	r1, #80	@ 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f971 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e02c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 f937 	bl	8004fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2160      	movs	r1, #96	@ 0x60
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f961 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e01c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 f8f8 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2140      	movs	r1, #64	@ 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f951 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e00c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 f948 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004dae:	e003      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	00100070 	.word	0x00100070
 8004dd8:	00100040 	.word	0x00100040
 8004ddc:	00100030 	.word	0x00100030
 8004de0:	00100020 	.word	0x00100020

08004de4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a42      	ldr	r2, [pc, #264]	@ (8004f64 <TIM_Base_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00f      	beq.n	8004e80 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	d00b      	beq.n	8004e80 <TIM_Base_SetConfig+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f68 <TIM_Base_SetConfig+0x120>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d007      	beq.n	8004e80 <TIM_Base_SetConfig+0x38>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3e      	ldr	r2, [pc, #248]	@ (8004f6c <TIM_Base_SetConfig+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_Base_SetConfig+0x38>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f70 <TIM_Base_SetConfig+0x128>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d108      	bne.n	8004e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a33      	ldr	r2, [pc, #204]	@ (8004f64 <TIM_Base_SetConfig+0x11c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01b      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea0:	d017      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	@ (8004f68 <TIM_Base_SetConfig+0x120>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2f      	ldr	r2, [pc, #188]	@ (8004f6c <TIM_Base_SetConfig+0x124>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f70 <TIM_Base_SetConfig+0x128>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <TIM_Base_SetConfig+0x130>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <TIM_Base_SetConfig+0x134>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a16      	ldr	r2, [pc, #88]	@ (8004f64 <TIM_Base_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00f      	beq.n	8004f30 <TIM_Base_SetConfig+0xe8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_Base_SetConfig+0x128>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_Base_SetConfig+0xe8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_Base_SetConfig+0xe8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0xe8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a14      	ldr	r2, [pc, #80]	@ (8004f7c <TIM_Base_SetConfig+0x134>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d103      	bne.n	8004f38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]
  }
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 030a 	bic.w	r3, r3, #10
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b087      	sub	sp, #28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f023 0210 	bic.w	r2, r3, #16
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800501a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	f043 0307 	orr.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	431a      	orrs	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e065      	b.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	@ (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2b      	ldr	r2, [pc, #172]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800510a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800511c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005146:	d013      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a13      	ldr	r2, [pc, #76]	@ (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10c      	bne.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40013400 	.word	0x40013400
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <memset>:
 8005248:	4402      	add	r2, r0
 800524a:	4603      	mov	r3, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	@ (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	@ (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	@ (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	@ (800529c <__libc_init_array+0x44>)
 800526c:	f000 f818 	bl	80052a0 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	080052e0 	.word	0x080052e0
 8005294:	080052e0 	.word	0x080052e0
 8005298:	080052e0 	.word	0x080052e0
 800529c:	080052e4 	.word	0x080052e4

080052a0 <_init>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr

080052ac <_fini>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr
