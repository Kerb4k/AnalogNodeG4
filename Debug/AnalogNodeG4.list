
AnalogNodeG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b00  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf8  08005cf8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005cf8  08005cf8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cf8  08005cf8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005d00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000010  08005d10  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08005d10  000076d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf1  00000000  00000000  0001c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0001ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020888  00000000  00000000  00021098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b4b  00000000  00000000  00041920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da962  00000000  00000000  0005746b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131dcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  00131e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00137760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cc0 	.word	0x08005cc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005cc0 	.word	0x08005cc0

08000218 <Config_Setup>:
#define FLASH_ADDRESS 0x0801F800

#define ID 1


void Config_Setup(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	read_all_calib_values();
 800021c:	f000 f828 	bl	8000270 <read_all_calib_values>

#if ID == 1
    Config_1();
 8000220:	f000 f864 	bl	80002ec <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <check_calib_status>:
    // Lock the Flash memory after operation
    HAL_FLASH_Lock();
    // Enable interrupts after the operation
    __enable_irq();
}
void check_calib_status(Sensor *sensor){
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]

	uint16_t default_values = 0xFFFF;
 8000230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000234:	81bb      	strh	r3, [r7, #12]
	int8_t code = 3;
 8000236:	2303      	movs	r3, #3
 8000238:	73fb      	strb	r3, [r7, #15]
	if(sensor->low_adc == default_values )
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	8a1b      	ldrh	r3, [r3, #16]
 800023e:	89ba      	ldrh	r2, [r7, #12]
 8000240:	429a      	cmp	r2, r3
 8000242:	d103      	bne.n	800024c <check_calib_status+0x24>
		code -= 1;
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	3b01      	subs	r3, #1
 8000248:	b2db      	uxtb	r3, r3
 800024a:	73fb      	strb	r3, [r7, #15]
	if(sensor->high_adc == default_values )
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	8a5b      	ldrh	r3, [r3, #18]
 8000250:	89ba      	ldrh	r2, [r7, #12]
 8000252:	429a      	cmp	r2, r3
 8000254:	d103      	bne.n	800025e <check_calib_status+0x36>
		code -= 2;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	3b02      	subs	r3, #2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	73fb      	strb	r3, [r7, #15]

	sensor->calib_code = code;
 800025e:	7bfa      	ldrb	r2, [r7, #15]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	735a      	strb	r2, [r3, #13]

}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <read_all_calib_values>:

void read_all_calib_values(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

	for(int i = 0; i < SENSOR_NUM; i++){
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	e02d      	b.n	80002d8 <read_all_calib_values+0x68>

		uint32_t value = *(__IO uint32_t*)(FLASH_ADDRESS + i * 8);
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8000282:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	60bb      	str	r3, [r7, #8]

		uint16_t low = value;
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	80fb      	strh	r3, [r7, #6]
		uint16_t high = value >> 16;
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	80bb      	strh	r3, [r7, #4]

		sensors[i].low_adc = low;
 8000296:	4914      	ldr	r1, [pc, #80]	@ (80002e8 <read_all_calib_values+0x78>)
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	4613      	mov	r3, r2
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4413      	add	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	440b      	add	r3, r1
 80002a4:	3310      	adds	r3, #16
 80002a6:	88fa      	ldrh	r2, [r7, #6]
 80002a8:	801a      	strh	r2, [r3, #0]
		sensors[i].high_adc = high;
 80002aa:	490f      	ldr	r1, [pc, #60]	@ (80002e8 <read_all_calib_values+0x78>)
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	3312      	adds	r3, #18
 80002ba:	88ba      	ldrh	r2, [r7, #4]
 80002bc:	801a      	strh	r2, [r3, #0]

		check_calib_status(&sensors[i]);
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	4613      	mov	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4a07      	ldr	r2, [pc, #28]	@ (80002e8 <read_all_calib_values+0x78>)
 80002ca:	4413      	add	r3, r2
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ffab 	bl	8000228 <check_calib_status>
	for(int i = 0; i < SENSOR_NUM; i++){
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b0b      	cmp	r3, #11
 80002dc:	ddce      	ble.n	800027c <read_all_calib_values+0xc>
	}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000288 	.word	0x20000288

080002ec <Config_1>:


void Config_1(void) {
 80002ec:	b4b0      	push	{r4, r5, r7}
 80002ee:	b0af      	sub	sp, #188	@ 0xbc
 80002f0:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < SENSOR_NUM; i++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80002f8:	e03d      	b.n	8000376 <Config_1+0x8a>
		sensors[i].transfer_function = TF_3V3;
 80002fa:	49be      	ldr	r1, [pc, #760]	@ (80005f4 <Config_1+0x308>)
 80002fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	440b      	add	r3, r1
 800030a:	4abb      	ldr	r2, [pc, #748]	@ (80005f8 <Config_1+0x30c>)
 800030c:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 800030e:	49b9      	ldr	r1, [pc, #740]	@ (80005f4 <Config_1+0x308>)
 8000310:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000314:	4613      	mov	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	440b      	add	r3, r1
 800031e:	3304      	adds	r3, #4
 8000320:	2200      	movs	r2, #0
 8000322:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 20;
 8000324:	49b3      	ldr	r1, [pc, #716]	@ (80005f4 <Config_1+0x308>)
 8000326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800032a:	4613      	mov	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	4413      	add	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	3306      	adds	r3, #6
 8000336:	2214      	movs	r2, #20
 8000338:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 800033a:	49ae      	ldr	r1, [pc, #696]	@ (80005f4 <Config_1+0x308>)
 800033c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000340:	4613      	mov	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	440b      	add	r3, r1
 800034a:	3308      	adds	r3, #8
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 8000350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000354:	b2d8      	uxtb	r0, r3
 8000356:	49a7      	ldr	r1, [pc, #668]	@ (80005f4 <Config_1+0x308>)
 8000358:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	330c      	adds	r3, #12
 8000368:	4602      	mov	r2, r0
 800036a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SENSOR_NUM; i++) {
 800036c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000370:	3301      	adds	r3, #1
 8000372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800037a:	2b0b      	cmp	r3, #11
 800037c:	ddbd      	ble.n	80002fa <Config_1+0xe>
	}

	// Sensor definitions
	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in0};
 800037e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
 800038e:	4b9b      	ldr	r3, [pc, #620]	@ (80005fc <Config_1+0x310>)
 8000390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000394:	230c      	movs	r3, #12
 8000396:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 800039a:	2364      	movs	r3, #100	@ 0x64
 800039c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80003a0:	2302      	movs	r3, #2
 80003a2:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in5};
 80003a6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]
 80003b6:	4b91      	ldr	r3, [pc, #580]	@ (80005fc <Config_1+0x310>)
 80003b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80003bc:	230d      	movs	r3, #13
 80003be:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80003c2:	2364      	movs	r3, #100	@ 0x64
 80003c4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80003c8:	2307      	movs	r3, #7
 80003ca:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in4};
 80003ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]
 80003de:	4b87      	ldr	r3, [pc, #540]	@ (80005fc <Config_1+0x310>)
 80003e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80003e2:	230e      	movs	r3, #14
 80003e4:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80003e8:	2364      	movs	r3, #100	@ 0x64
 80003ea:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 80003ee:	2306      	movs	r3, #6
 80003f0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 80003f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	4b7e      	ldr	r3, [pc, #504]	@ (8000600 <Config_1+0x314>)
 8000406:	667b      	str	r3, [r7, #100]	@ 0x64
 8000408:	2302      	movs	r3, #2
 800040a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800040e:	2364      	movs	r3, #100	@ 0x64
 8000410:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000414:	2303      	movs	r3, #3
 8000416:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	Sensor APPS1 = {TF_APPS1, 1, 100, 0, V24_in1};
 800041a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	4b76      	ldr	r3, [pc, #472]	@ (8000604 <Config_1+0x318>)
 800042c:	653b      	str	r3, [r7, #80]	@ 0x50
 800042e:	2301      	movs	r3, #1
 8000430:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000434:	2364      	movs	r3, #100	@ 0x64
 8000436:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800043a:	2305      	movs	r3, #5
 800043c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Sensor ANGLE = {TF_24V, 6, 100, 0, V24_in0};
 8000440:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
 8000450:	4b6d      	ldr	r3, [pc, #436]	@ (8000608 <Config_1+0x31c>)
 8000452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000454:	2306      	movs	r3, #6
 8000456:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800045a:	2364      	movs	r3, #100	@ 0x64
 800045c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000460:	2309      	movs	r3, #9
 8000462:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 8000466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
 8000476:	4b65      	ldr	r3, [pc, #404]	@ (800060c <Config_1+0x320>)
 8000478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800047a:	2303      	movs	r3, #3
 800047c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800047e:	2364      	movs	r3, #100	@ 0x64
 8000480:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000482:	230b      	movs	r3, #11
 8000484:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	Sensor F_ROLL = {TF_5V, 10, 100, 0, V5_in6};
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
 8000498:	4b5d      	ldr	r3, [pc, #372]	@ (8000610 <Config_1+0x324>)
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	230a      	movs	r3, #10
 800049e:	833b      	strh	r3, [r7, #24]
 80004a0:	2364      	movs	r3, #100	@ 0x64
 80004a2:	837b      	strh	r3, [r7, #26]
 80004a4:	2308      	movs	r3, #8
 80004a6:	f887 3020 	strb.w	r3, [r7, #32]
	Sensor F_HEAVE = {TF_5V, 8, 100, 0, V5_in3};
 80004aa:	463b      	mov	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
 80004b8:	4b55      	ldr	r3, [pc, #340]	@ (8000610 <Config_1+0x324>)
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	2308      	movs	r3, #8
 80004be:	80bb      	strh	r3, [r7, #4]
 80004c0:	2364      	movs	r3, #100	@ 0x64
 80004c2:	80fb      	strh	r3, [r7, #6]
 80004c4:	230a      	movs	r3, #10
 80004c6:	733b      	strb	r3, [r7, #12]

    sensors[APPS1.pin] = APPS1;
 80004c8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80004cc:	4619      	mov	r1, r3
 80004ce:	4a49      	ldr	r2, [pc, #292]	@ (80005f4 <Config_1+0x308>)
 80004d0:	460b      	mov	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	461d      	mov	r5, r3
 80004dc:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80004e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	602b      	str	r3, [r5, #0]
    sensors[APPS2.pin] = APPS2;
 80004e8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80004ec:	4619      	mov	r1, r3
 80004ee:	4a41      	ldr	r2, [pc, #260]	@ (80005f4 <Config_1+0x308>)
 80004f0:	460b      	mov	r3, r1
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	461d      	mov	r5, r3
 80004fc:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8000500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	602b      	str	r3, [r5, #0]
    sensors[BPPS.pin] = BPPS;
 8000508:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800050c:	4619      	mov	r1, r3
 800050e:	4a39      	ldr	r2, [pc, #228]	@ (80005f4 <Config_1+0x308>)
 8000510:	460b      	mov	r3, r1
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	440b      	add	r3, r1
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	461d      	mov	r5, r3
 800051c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	602b      	str	r3, [r5, #0]
	sensors[BTN1.pin] = BTN1;
 8000528:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800052c:	4619      	mov	r1, r3
 800052e:	4a31      	ldr	r2, [pc, #196]	@ (80005f4 <Config_1+0x308>)
 8000530:	460b      	mov	r3, r1
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	440b      	add	r3, r1
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	461d      	mov	r5, r3
 800053c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8000540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	602b      	str	r3, [r5, #0]
	sensors[BTN2.pin] = BTN2;
 8000548:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800054c:	4619      	mov	r1, r3
 800054e:	4a29      	ldr	r2, [pc, #164]	@ (80005f4 <Config_1+0x308>)
 8000550:	460b      	mov	r3, r1
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	440b      	add	r3, r1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	461d      	mov	r5, r3
 800055c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	602b      	str	r3, [r5, #0]
	sensors[BTN3.pin] = BTN3;
 8000568:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800056c:	4619      	mov	r1, r3
 800056e:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <Config_1+0x308>)
 8000570:	460b      	mov	r3, r1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	461d      	mov	r5, r3
 800057c:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	602b      	str	r3, [r5, #0]
	sensors[ANGLE.pin] = ANGLE;
 8000588:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800058c:	4619      	mov	r1, r3
 800058e:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <Config_1+0x308>)
 8000590:	460b      	mov	r3, r1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	461d      	mov	r5, r3
 800059c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	602b      	str	r3, [r5, #0]
	sensors[F_ROLL.pin] = F_ROLL;
 80005a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4a11      	ldr	r2, [pc, #68]	@ (80005f4 <Config_1+0x308>)
 80005b0:	460b      	mov	r3, r1
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	461d      	mov	r5, r3
 80005bc:	f107 0414 	add.w	r4, r7, #20
 80005c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	602b      	str	r3, [r5, #0]
	sensors[F_HEAVE.pin] = F_HEAVE;
 80005c8:	7b3b      	ldrb	r3, [r7, #12]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <Config_1+0x308>)
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	461d      	mov	r5, r3
 80005da:	463c      	mov	r4, r7
 80005dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	602b      	str	r3, [r5, #0]
	

    CAN_interval = 20;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <Config_1+0x328>)
 80005e6:	2214      	movs	r2, #20
 80005e8:	801a      	strh	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	37bc      	adds	r7, #188	@ 0xbc
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bcb0      	pop	{r4, r5, r7}
 80005f2:	e011      	b.n	8000618 <Config_1+0x32c>
 80005f4:	20000288 	.word	0x20000288
 80005f8:	0800157d 	.word	0x0800157d
 80005fc:	080017a9 	.word	0x080017a9
 8000600:	08001731 	.word	0x08001731
 8000604:	080016b9 	.word	0x080016b9
 8000608:	080015fd 	.word	0x080015fd
 800060c:	0800163d 	.word	0x0800163d
 8000610:	080015bd 	.word	0x080015bd
 8000614:	20000692 	.word	0x20000692
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d024      	beq.n	800067a <HAL_FDCAN_RxFifo0Callback+0x5e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f003 f8b8 	bl	80037ac <HAL_FDCAN_GetRxMessage>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000642:	f000 fd37 	bl	80010b4 <Error_Handler>
 8000646:	e00e      	b.n	8000666 <HAL_FDCAN_RxFifo0Callback+0x4a>
		}else{

			RxMessage.Id = RxHeader.Identifier;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000650:	801a      	strh	r2, [r3, #0]
			RxMessage.DLC = RxHeader.DataLength;
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <HAL_FDCAN_RxFifo0Callback+0x70>)
 800065a:	709a      	strb	r2, [r3, #2]

			decode(RxMessage);
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_FDCAN_RxFifo0Callback+0x70>)
 800065e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000662:	f000 f893 	bl	800078c <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f003 f9a6 	bl	80039bc <HAL_FDCAN_ActivateNotification>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_FDCAN_RxFifo0Callback+0x5e>
		{
			/* Notification Error */
			Error_Handler();
 8000676:	f000 fd1d 	bl	80010b4 <Error_Handler>
		}
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000002f 	.word	0x2000002f
 8000688:	2000069c 	.word	0x2000069c
 800068c:	2000002c 	.word	0x2000002c

08000690 <print>:



void print(uint16_t select){
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
		TxHeader.Identifier = sensors[select].CAN_ID;

		if(sensors[select].CAN_ID)
			CanSend(TxMessage.Bytes);
			*/
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <calibration>:

}

uint8_t calibration_counter = 0;
uint32_t calibration_value = 0;
void calibration(){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

	if(calib_select == -1){
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <calibration+0xcc>)
 80006ae:	f993 3000 	ldrsb.w	r3, [r3]
 80006b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b6:	d058      	beq.n	800076a <calibration+0xc2>
		return;
	}
	else{
		calibration_value += sensors[sensor_for_calib].averages;
 80006b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <calibration+0xd0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <calibration+0xd4>)
 80006c0:	460b      	mov	r3, r1
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	3308      	adds	r3, #8
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <calibration+0xd8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <calibration+0xd8>)
 80006d6:	6013      	str	r3, [r2, #0]
		calibration_counter++;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <calibration+0xdc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <calibration+0xdc>)
 80006e2:	701a      	strb	r2, [r3, #0]

		if(calibration_counter > 3000 / CAN_interval){
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <calibration+0xdc>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <calibration+0xe0>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dd37      	ble.n	800076c <calibration+0xc4>

			calibration_value = calibration_value / calibration_counter;
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <calibration+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <calibration+0xdc>)
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	fbb3 f3f2 	udiv	r3, r3, r2
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <calibration+0xd8>)
 800070a:	6013      	str	r3, [r2, #0]

			if(calib_select == 0)
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <calibration+0xcc>)
 800070e:	f993 3000 	ldrsb.w	r3, [r3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10e      	bne.n	8000734 <calibration+0x8c>
				sensors[sensor_for_calib].low_adc = calibration_value;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <calibration+0xd8>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <calibration+0xd0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	b290      	uxth	r0, r2
 8000722:	4a16      	ldr	r2, [pc, #88]	@ (800077c <calibration+0xd4>)
 8000724:	460b      	mov	r3, r1
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	440b      	add	r3, r1
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	3310      	adds	r3, #16
 8000730:	4602      	mov	r2, r0
 8000732:	801a      	strh	r2, [r3, #0]
			if(calib_select == 1)
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <calibration+0xcc>)
 8000736:	f993 3000 	ldrsb.w	r3, [r3]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d10e      	bne.n	800075c <calibration+0xb4>
				sensors[sensor_for_calib].high_adc = calibration_value;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <calibration+0xd8>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <calibration+0xd0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	b290      	uxth	r0, r2
 800074a:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <calibration+0xd4>)
 800074c:	460b      	mov	r3, r1
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	3312      	adds	r3, #18
 8000758:	4602      	mov	r2, r0
 800075a:	801a      	strh	r2, [r3, #0]


			calib_select = -1;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <calibration+0xcc>)
 800075e:	22ff      	movs	r2, #255	@ 0xff
 8000760:	701a      	strb	r2, [r3, #0]
			calibration_counter = 0;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <calibration+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e000      	b.n	800076c <calibration+0xc4>
		return;
 800076a:	bf00      	nop
		}

	}
}
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000
 8000778:	20000038 	.word	0x20000038
 800077c:	20000288 	.word	0x20000288
 8000780:	2000003c 	.word	0x2000003c
 8000784:	20000039 	.word	0x20000039
 8000788:	20000692 	.word	0x20000692

0800078c <decode>:

void decode(CAN_Message msg){
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch(msg.Id){
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	2b1f      	cmp	r3, #31
 800079c:	d107      	bne.n	80007ae <decode+0x22>
		case CAN_CALIB_ID:
			sensor_for_calib = msg.Bytes[0];
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <decode+0x30>)
 80007a2:	701a      	strb	r2, [r3, #0]
			calib_select = msg.Bytes[1];
 80007a4:	7a3b      	ldrb	r3, [r7, #8]
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <decode+0x34>)
 80007aa:	701a      	strb	r2, [r3, #0]
			break;
 80007ac:	bf00      	nop
	}
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000038 	.word	0x20000038
 80007c0:	20000000 	.word	0x20000000

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f001 f83c 	bl	8001846 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 80007ce:	f7ff fd23 	bl	8000218 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f885 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 fb0b 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007da:	f000 fad7 	bl	8000d8c <MX_DMA_Init>
  MX_ADC1_Init();
 80007de:	f000 f8bf 	bl	8000960 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80007e2:	f000 fa3f 	bl	8000c64 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80007e6:	f000 fa83 	bl	8000cf0 <MX_TIM3_Init>
  MX_ADC2_Init();
 80007ea:	f000 f983 	bl	8000af4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 80007ee:	4831      	ldr	r0, [pc, #196]	@ (80008b4 <main+0xf0>)
 80007f0:	f004 fd54 	bl	800529c <HAL_TIM_Base_Start_IT>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <main+0x3a>
 80007fa:	f000 fc5b 	bl	80010b4 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <main+0xf4>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	461a      	mov	r2, r3
 8000804:	492d      	ldr	r1, [pc, #180]	@ (80008bc <main+0xf8>)
 8000806:	482c      	ldr	r0, [pc, #176]	@ (80008b8 <main+0xf4>)
 8000808:	f001 fc30 	bl	800206c <HAL_ADC_Start_DMA>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <main+0x52>
 8000812:	f000 fc4f 	bl	80010b4 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <main+0xfc>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	461a      	mov	r2, r3
 800081c:	4929      	ldr	r1, [pc, #164]	@ (80008c4 <main+0x100>)
 800081e:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <main+0xfc>)
 8000820:	f001 fc24 	bl	800206c <HAL_ADC_Start_DMA>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <main+0x6a>
 800082a:	f000 fc43 	bl	80010b4 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 800082e:	4826      	ldr	r0, [pc, #152]	@ (80008c8 <main+0x104>)
 8000830:	f002 ff94 	bl	800375c <HAL_FDCAN_Start>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <main+0x7c>
 800083a:	f000 fc3b 	bl	80010b4 <Error_Handler>
 800083e:	e008      	b.n	8000852 <main+0x8e>
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000846:	4821      	ldr	r0, [pc, #132]	@ (80008cc <main+0x108>)
 8000848:	f003 fd04 	bl	8004254 <HAL_GPIO_WritePin>
 800084c:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <main+0x10c>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	481c      	ldr	r0, [pc, #112]	@ (80008c8 <main+0x104>)
 8000858:	f003 f8b0 	bl	80039bc <HAL_FDCAN_ActivateNotification>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0xa2>
 8000862:	f000 fc27 	bl	80010b4 <Error_Handler>

  uint8_t counter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]


  read_all_calib_values();
 800086a:	f7ff fd01 	bl	8000270 <read_all_calib_values>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <main+0x10c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d1fb      	bne.n	800086e <main+0xaa>
		  if(millis % CAN_interval == 0){
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <main+0x110>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a17      	ldr	r2, [pc, #92]	@ (80008d8 <main+0x114>)
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000882:	fb01 f202 	mul.w	r2, r1, r2
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1f0      	bne.n	800086e <main+0xaa>
			  print(counter);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	b29b      	uxth	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fefd 	bl	8000690 <print>
			  calibration();
 8000896:	f7ff ff07 	bl	80006a8 <calibration>
			  counter++;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	3301      	adds	r3, #1
 800089e:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b10      	cmp	r3, #16
 80008a4:	d1e3      	bne.n	800086e <main+0xaa>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80008a6:	2140      	movs	r1, #64	@ 0x40
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <main+0x118>)
 80008aa:	f003 fceb 	bl	8004284 <HAL_GPIO_TogglePin>
				  counter = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 80008b2:	e7dc      	b.n	800086e <main+0xaa>
 80008b4:	2000023c 	.word	0x2000023c
 80008b8:	20000040 	.word	0x20000040
 80008bc:	20000378 	.word	0x20000378
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	20000384 	.word	0x20000384
 80008c8:	200001d8 	.word	0x200001d8
 80008cc:	48000400 	.word	0x48000400
 80008d0:	20000698 	.word	0x20000698
 80008d4:	20000694 	.word	0x20000694
 80008d8:	20000692 	.word	0x20000692
 80008dc:	48000800 	.word	0x48000800

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	@ 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2238      	movs	r2, #56	@ 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 f9ba 	bl	8005c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000902:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000906:	f003 fcd7 	bl	80042b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fd7d 	bl	8004420 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800092c:	f000 fbc2 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2301      	movs	r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f87b 	bl	8004a44 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000954:	f000 fbae 	bl	80010b4 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3750      	adds	r7, #80	@ 0x50
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2220      	movs	r2, #32
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f005 f975 	bl	8005c68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097e:	4b56      	ldr	r3, [pc, #344]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000980:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000984:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000986:	4b54      	ldr	r3, [pc, #336]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000988:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800098c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000994:	4b50      	ldr	r3, [pc, #320]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800099a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009ac:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b2:	4b49      	ldr	r3, [pc, #292]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80009b8:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009ba:	2206      	movs	r2, #6
 80009bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009be:	4b46      	ldr	r3, [pc, #280]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009cc:	4b42      	ldr	r3, [pc, #264]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d2:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009da:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009dc:	2200      	movs	r2, #0
 80009de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009e0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e8:	483b      	ldr	r0, [pc, #236]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 80009ea:	f001 f9bb 	bl	8001d64 <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009f4:	f000 fb5e 	bl	80010b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4835      	ldr	r0, [pc, #212]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000a04:	f002 f92a 	bl	8002c5c <HAL_ADCEx_MultiModeConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a0e:	f000 fb51 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a12:	4b32      	ldr	r3, [pc, #200]	@ (8000adc <MX_ADC1_Init+0x17c>)
 8000a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a16:	2306      	movs	r3, #6
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1e:	237f      	movs	r3, #127	@ 0x7f
 8000a20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a22:	2304      	movs	r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482a      	ldr	r0, [pc, #168]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000a30:	f001 fbe4 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a3a:	f000 fb3b 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <MX_ADC1_Init+0x180>)
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a42:	230c      	movs	r3, #12
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4823      	ldr	r0, [pc, #140]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000a4c:	f001 fbd6 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a56:	f000 fb2d 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_ADC1_Init+0x184>)
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	481c      	ldr	r0, [pc, #112]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000a68:	f001 fbc8 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000a72:	f000 fb1f 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_ADC1_Init+0x188>)
 8000a78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a7a:	2318      	movs	r3, #24
 8000a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000a84:	f001 fbba 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000a8e:	f000 fb11 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_ADC1_Init+0x18c>)
 8000a94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000aa2:	f001 fbab 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000aac:	f000 fb02 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_ADC1_Init+0x190>)
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ab4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_ADC1_Init+0x178>)
 8000ac0:	f001 fb9c 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000aca:	f000 faf3 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	@ 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000040 	.word	0x20000040
 8000adc:	04300002 	.word	0x04300002
 8000ae0:	08600004 	.word	0x08600004
 8000ae4:	0c900008 	.word	0x0c900008
 8000ae8:	10c00010 	.word	0x10c00010
 8000aec:	32601000 	.word	0x32601000
 8000af0:	3ef08000 	.word	0x3ef08000

08000af4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 f8b1 	bl	8005c68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b06:	4b4f      	ldr	r3, [pc, #316]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b08:	4a4f      	ldr	r2, [pc, #316]	@ (8000c48 <MX_ADC2_Init+0x154>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b0e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b14:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b20:	4b48      	ldr	r3, [pc, #288]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b26:	4b47      	ldr	r3, [pc, #284]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2c:	4b45      	ldr	r3, [pc, #276]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b32:	4b44      	ldr	r3, [pc, #272]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b38:	4b42      	ldr	r3, [pc, #264]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b40:	2206      	movs	r2, #6
 8000b42:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b44:	4b3f      	ldr	r3, [pc, #252]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b3c      	ldr	r3, [pc, #240]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b60:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b66:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6e:	4835      	ldr	r0, [pc, #212]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b70:	f001 f8f8 	bl	8001d64 <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 fa9b 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b7e:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <MX_ADC2_Init+0x158>)
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b82:	2306      	movs	r3, #6
 8000b84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8a:	237f      	movs	r3, #127	@ 0x7f
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000b9c:	f001 fb2e 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ba6:	f000 fa85 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_ADC2_Init+0x15c>)
 8000bac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4823      	ldr	r0, [pc, #140]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000bb8:	f001 fb20 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000bc2:	f000 fa77 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <MX_ADC2_Init+0x160>)
 8000bc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481c      	ldr	r0, [pc, #112]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000bd4:	f001 fb12 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000bde:	f000 fa69 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <MX_ADC2_Init+0x164>)
 8000be4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000be6:	2318      	movs	r3, #24
 8000be8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4815      	ldr	r0, [pc, #84]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000bf0:	f001 fb04 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000bfa:	f000 fa5b 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_ADC2_Init+0x168>)
 8000c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000c0e:	f001 faf5 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000c18:	f000 fa4c 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_ADC2_Init+0x16c>)
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c20:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000c24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	@ (8000c44 <MX_ADC2_Init+0x150>)
 8000c2c:	f001 fae6 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000c36:	f000 fa3d 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000ac 	.word	0x200000ac
 8000c48:	50000100 	.word	0x50000100
 8000c4c:	0c900008 	.word	0x0c900008
 8000c50:	10c00010 	.word	0x10c00010
 8000c54:	14f00020 	.word	0x14f00020
 8000c58:	2e300800 	.word	0x2e300800
 8000c5c:	36902000 	.word	0x36902000
 8000c60:	47520000 	.word	0x47520000

08000c64 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <MX_FDCAN1_Init+0x88>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000ca0:	220d      	movs	r2, #13
 8000ca2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_FDCAN1_Init+0x84>)
 8000cd6:	f002 fbe7 	bl	80034a8 <HAL_FDCAN_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000ce0:	f000 f9e8 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001d8 	.word	0x200001d8
 8000cec:	40006400 	.word	0x40006400

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d10:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <MX_TIM3_Init+0x98>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d16:	220f      	movs	r2, #15
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d36:	f004 fa59 	bl	80051ec <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d40:	f000 f9b8 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d52:	f004 fc5d 	bl	8005610 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 f9aa 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d6e:	f004 feb3 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f99c 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000023c 	.word	0x2000023c
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_DMA_Init+0x60>)
 8000d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d96:	4a15      	ldr	r2, [pc, #84]	@ (8000dec <MX_DMA_Init+0x60>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_DMA_Init+0x60>)
 8000da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_DMA_Init+0x60>)
 8000dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <MX_DMA_Init+0x60>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <MX_DMA_Init+0x60>)
 8000db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200b      	movs	r0, #11
 8000dc8:	f002 f8c7 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f002 f8de 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f002 f8bf 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f002 f8d6 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	4a27      	ldr	r2, [pc, #156]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_GPIO_Init+0xd0>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e6c:	4815      	ldr	r0, [pc, #84]	@ (8000ec4 <MX_GPIO_Init+0xd4>)
 8000e6e:	f003 f9f1 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <MX_GPIO_Init+0xd8>)
 8000e78:	f003 f9ec 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <MX_GPIO_Init+0xd4>)
 8000e96:	f003 f85b 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000e9a:	2340      	movs	r3, #64	@ 0x40
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_GPIO_Init+0xd8>)
 8000eb2:	f003 f84d 	bl	8003f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800

08000ecc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000edc:	d168      	bne.n	8000fb0 <HAL_ADC_ConvCpltCallback+0xe4>
		if(AVE_POS < ROLLING_AVE){
 8000ede:	4b70      	ldr	r3, [pc, #448]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b1f      	cmp	r3, #31
 8000ee4:	d806      	bhi.n	8000ef4 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b6c      	ldr	r3, [pc, #432]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e044      	b.n	8000f7e <HAL_ADC_ConvCpltCallback+0xb2>
		}
		else{
			AVE_POS = 0;
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e039      	b.n	8000f74 <HAL_ADC_ConvCpltCallback+0xa8>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	e030      	b.n	8000f68 <HAL_ADC_ConvCpltCallback+0x9c>
					if(z == 0){
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <HAL_ADC_ConvCpltCallback+0x60>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8000f0c:	4a65      	ldr	r2, [pc, #404]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	4963      	ldr	r1, [pc, #396]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	6018      	str	r0, [r3, #0]
 8000f2a:	e01a      	b.n	8000f62 <HAL_ADC_ConvCpltCallback+0x96>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 8000f2c:	495e      	ldr	r1, [pc, #376]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4859      	ldr	r0, [pc, #356]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	0151      	lsls	r1, r2, #5
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	440a      	add	r2, r1
 8000f48:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	0859      	lsrs	r1, r3, #1
 8000f50:	4855      	ldr	r0, [pc, #340]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	3308      	adds	r3, #8
 8000f60:	6019      	str	r1, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b1f      	cmp	r3, #31
 8000f6c:	ddcb      	ble.n	8000f06 <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d8c0      	bhi.n	8000f00 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e010      	b.n	8000fa6 <HAL_ADC_ConvCpltCallback+0xda>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8000f84:	4b46      	ldr	r3, [pc, #280]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4948      	ldr	r1, [pc, #288]	@ (80010ac <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8000f92:	4944      	ldr	r1, [pc, #272]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	0152      	lsls	r2, r2, #5
 8000f98:	4413      	add	r3, r2
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8e9      	bhi.n	8000f84 <HAL_ADC_ConvCpltCallback+0xb8>
		}
	}

	if(hadc->Instance == ADC2){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80010b0 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d16c      	bne.n	8001094 <HAL_ADC_ConvCpltCallback+0x1c8>
			if(AVE_POS < ROLLING_AVE){
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b1f      	cmp	r3, #31
 8000fc0:	d806      	bhi.n	8000fd0 <HAL_ADC_ConvCpltCallback+0x104>
				AVE_POS++;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b35      	ldr	r3, [pc, #212]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e046      	b.n	800105e <HAL_ADC_ConvCpltCallback+0x192>
			}
			else{
				AVE_POS = 0;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
				for(int i = 8; i < hadc->Init.NbrOfConversion + 8;i++){
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	e039      	b.n	8001050 <HAL_ADC_ConvCpltCallback+0x184>
					for(int z = 0; z < ROLLING_AVE;z++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e030      	b.n	8001044 <HAL_ADC_ConvCpltCallback+0x178>
						if(z == 0){
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <HAL_ADC_ConvCpltCallback+0x13c>
							//averages[i] = all_raw_data[i][0];
	            sensors[i].averages = all_raw_data[i][0];
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	4413      	add	r3, r2
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	492c      	ldr	r1, [pc, #176]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3308      	adds	r3, #8
 8001004:	6018      	str	r0, [r3, #0]
 8001006:	e01a      	b.n	800103e <HAL_ADC_ConvCpltCallback+0x172>
						}else{
							//averages[i]=(averages[i] + all_raw_data[i][z])/2;
	            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 8001008:	4927      	ldr	r1, [pc, #156]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3308      	adds	r3, #8
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4822      	ldr	r0, [pc, #136]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	0151      	lsls	r1, r2, #5
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	440a      	add	r2, r1
 8001024:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001028:	4413      	add	r3, r2
 800102a:	0859      	lsrs	r1, r3, #1
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x1dc>)
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4403      	add	r3, r0
 800103a:	3308      	adds	r3, #8
 800103c:	6019      	str	r1, [r3, #0]
					for(int z = 0; z < ROLLING_AVE;z++){
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b1f      	cmp	r3, #31
 8001048:	ddcb      	ble.n	8000fe2 <HAL_ADC_ConvCpltCallback+0x116>
				for(int i = 8; i < hadc->Init.NbrOfConversion + 8;i++){
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	f103 0208 	add.w	r2, r3, #8
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	429a      	cmp	r2, r3
 800105c:	d8be      	bhi.n	8000fdc <HAL_ADC_ConvCpltCallback+0x110>
						}
					}
				}
			}
			for(int j = 8; j < hadc->Init.NbrOfConversion + 8;j++){
 800105e:	2308      	movs	r3, #8
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	e010      	b.n	8001086 <HAL_ADC_ConvCpltCallback+0x1ba>
				all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4910      	ldr	r1, [pc, #64]	@ (80010ac <HAL_ADC_ConvCpltCallback+0x1e0>)
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8001072:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	0152      	lsls	r2, r2, #5
 8001078:	4413      	add	r3, r2
 800107a:	4602      	mov	r2, r0
 800107c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 8; j < hadc->Init.NbrOfConversion + 8;j++){
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3301      	adds	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	f103 0208 	add.w	r2, r3, #8
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8e7      	bhi.n	8001064 <HAL_ADC_ConvCpltCallback+0x198>
			}
		}
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	@ 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000690 	.word	0x20000690
 80010a4:	20000390 	.word	0x20000390
 80010a8:	20000288 	.word	0x20000288
 80010ac:	20000378 	.word	0x20000378
 80010b0:	50000100 	.word	0x50000100

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_MspInit+0x44>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001104 <HAL_MspInit+0x44>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x44>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010f6:	f003 f983 	bl	8004400 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09e      	sub	sp, #120	@ 0x78
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	2244      	movs	r2, #68	@ 0x44
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f004 fd9d 	bl	8005c68 <memset>
  if(hadc->Instance==ADC1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001136:	f040 8082 	bne.w	800123e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800113a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800113e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001140:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fe5e 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001156:	f7ff ffad 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800115a:	4b7e      	ldr	r3, [pc, #504]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a7c      	ldr	r2, [pc, #496]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 8001162:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001164:	4b7b      	ldr	r3, [pc, #492]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800116c:	4b7a      	ldr	r3, [pc, #488]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	4a79      	ldr	r2, [pc, #484]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 8001172:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001176:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001178:	4b77      	ldr	r3, [pc, #476]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001188:	4a73      	ldr	r2, [pc, #460]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001190:	4b71      	ldr	r3, [pc, #452]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b6e      	ldr	r3, [pc, #440]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	4a6d      	ldr	r2, [pc, #436]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC1_in2_Pin|ADC1_in3_Pin;
 80011b4:	230f      	movs	r3, #15
 80011b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f002 fec1 	bl	8003f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_in14_Pin|ADC1_in13_Pin;
 80011ce:	2303      	movs	r3, #3
 80011d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d2:	2303      	movs	r3, #3
 80011d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011de:	4619      	mov	r1, r3
 80011e0:	485e      	ldr	r0, [pc, #376]	@ (800135c <HAL_ADC_MspInit+0x254>)
 80011e2:	f002 feb5 	bl	8003f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 80011e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <HAL_ADC_MspInit+0x25c>)
 80011ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 80011ee:	2205      	movs	r2, #5
 80011f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f8:	4b59      	ldr	r3, [pc, #356]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fe:	4b58      	ldr	r3, [pc, #352]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001204:	4b56      	ldr	r3, [pc, #344]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800120c:	4b54      	ldr	r3, [pc, #336]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 800120e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001212:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001214:	4b52      	ldr	r3, [pc, #328]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001216:	2220      	movs	r2, #32
 8001218:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800121a:	4b51      	ldr	r3, [pc, #324]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001220:	484f      	ldr	r0, [pc, #316]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001222:	f001 fecf 	bl	8002fc4 <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800122c:	f7ff ff42 	bl	80010b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4b      	ldr	r2, [pc, #300]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001234:	655a      	str	r2, [r3, #84]	@ 0x54
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_ADC_MspInit+0x258>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800123c:	e086      	b.n	800134c <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <HAL_ADC_MspInit+0x260>)
 8001244:	4293      	cmp	r3, r2
 8001246:	f040 8081 	bne.w	800134c <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800124a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001250:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001254:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fdd6 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8001266:	f7ff ff25 	bl	80010b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800126a:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 8001272:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001274:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <HAL_ADC_MspInit+0x24c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10b      	bne.n	8001294 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	4a35      	ldr	r2, [pc, #212]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 8001282:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	4a2f      	ldr	r2, [pc, #188]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	4a29      	ldr	r2, [pc, #164]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_ADC_MspInit+0x250>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC2_in4_Pin|ADC2_in5_Pin
 80012c4:	23f3      	movs	r3, #243	@ 0xf3
 80012c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012da:	f002 fe39 	bl	8003f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_in8_Pin|ADC2_in15_Pin;
 80012de:	2330      	movs	r3, #48	@ 0x30
 80012e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	@ (800136c <HAL_ADC_MspInit+0x264>)
 80012f2:	f002 fe2d 	bl	8003f50 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 80012f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <HAL_ADC_MspInit+0x26c>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 80012fe:	2224      	movs	r2, #36	@ 0x24
 8001300:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800131a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 800131e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001322:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001330:	480f      	ldr	r0, [pc, #60]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001332:	f001 fe47 	bl	8002fc4 <HAL_DMA_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_ADC_MspInit+0x238>
      Error_Handler();
 800133c:	f7ff feba 	bl	80010b4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001344:	655a      	str	r2, [r3, #84]	@ 0x54
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_ADC_MspInit+0x268>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800134c:	bf00      	nop
 800134e:	3778      	adds	r7, #120	@ 0x78
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200006c4 	.word	0x200006c4
 8001358:	40021000 	.word	0x40021000
 800135c:	48000400 	.word	0x48000400
 8001360:	20000118 	.word	0x20000118
 8001364:	40020008 	.word	0x40020008
 8001368:	50000100 	.word	0x50000100
 800136c:	48000800 	.word	0x48000800
 8001370:	20000178 	.word	0x20000178
 8001374:	4002001c 	.word	0x4002001c

08001378 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b09a      	sub	sp, #104	@ 0x68
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2244      	movs	r2, #68	@ 0x44
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fc65 	bl	8005c68 <memset>
  if(hfdcan->Instance==FDCAN1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a24      	ldr	r2, [pc, #144]	@ (8001434 <HAL_FDCAN_MspInit+0xbc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d141      	bne.n	800142c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd27 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80013c4:	f7ff fe76 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_FDCAN_MspInit+0xc0>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800140a:	2309      	movs	r3, #9
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f002 fd9a 	bl	8003f50 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2015      	movs	r0, #21
 8001422:	f001 fd9a 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001426:	2015      	movs	r0, #21
 8001428:	f001 fdb1 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800142c:	bf00      	nop
 800142e:	3768      	adds	r7, #104	@ 0x68
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40006400 	.word	0x40006400
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <HAL_TIM_Base_MspInit+0x44>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d113      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6593      	str	r3, [r2, #88]	@ 0x58
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_TIM_Base_MspInit+0x48>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201d      	movs	r0, #29
 800146c:	f001 fd75 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001470:	201d      	movs	r0, #29
 8001472:	f001 fd8c 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000400 	.word	0x40000400
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <NMI_Handler+0x4>

08001490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <UsageFault_Handler+0x4>

080014b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014de:	f000 fa05 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <DMA1_Channel1_IRQHandler+0x10>)
 80014ee:	f001 fe8c 	bl	800320a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000118 	.word	0x20000118

080014fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <DMA1_Channel2_IRQHandler+0x10>)
 8001502:	f001 fe82 	bl	800320a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000178 	.word	0x20000178

08001510 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <FDCAN1_IT0_IRQHandler+0x10>)
 8001516:	f002 fb37 	bl	8003b88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001d8 	.word	0x200001d8

08001524 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
		millis++;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <TIM3_IRQHandler+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <TIM3_IRQHandler+0x28>)
 8001530:	6013      	str	r3, [r2, #0]
		if(millis == 1000){
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <TIM3_IRQHandler+0x28>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153a:	d102      	bne.n	8001542 <TIM3_IRQHandler+0x1e>
			CAN_enable = 1;
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <TIM3_IRQHandler+0x2c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <TIM3_IRQHandler+0x30>)
 8001544:	f003 ff14 	bl	8005370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000694 	.word	0x20000694
 8001550:	20000698 	.word	0x20000698
 8001554:	2000023c 	.word	0x2000023c

08001558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw, Sensor *sensor){
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]


	uint16_t max_volt = 3300;
 800158a:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800158e:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001590:	8afb      	ldrh	r3, [r7, #22]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	fb03 f202 	mul.w	r2, r3, r2
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <TF_3V3+0x3c>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	1ad2      	subs	r2, r2, r3
 80015a0:	0852      	lsrs	r2, r2, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	0adb      	lsrs	r3, r3, #11
 80015a6:	82bb      	strh	r3, [r7, #20]
	return voltage;
 80015a8:	8abb      	ldrh	r3, [r7, #20]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	00100101 	.word	0x00100101

080015bc <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	73fb      	strb	r3, [r7, #15]
	uint16_t max_volt = 5000;
 80015ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015ce:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 80015d0:	8afb      	ldrh	r3, [r7, #22]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	fb03 f202 	mul.w	r2, r3, r2
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <TF_5V+0x3c>)
 80015da:	fba3 1302 	umull	r1, r3, r3, r2
 80015de:	1ad2      	subs	r2, r2, r3
 80015e0:	0852      	lsrs	r2, r2, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	0adb      	lsrs	r3, r3, #11
 80015e6:	82bb      	strh	r3, [r7, #20]
	return voltage;
 80015e8:	8abb      	ldrh	r3, [r7, #20]

}
 80015ea:	4618      	mov	r0, r3
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	00100101 	.word	0x00100101

080015fc <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	73fb      	strb	r3, [r7, #15]
	uint16_t max_volt = 24000;
 800160a:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800160e:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <TF_24V+0x3c>)
 800161a:	fba3 1302 	umull	r1, r3, r3, r2
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	0852      	lsrs	r2, r2, #1
 8001622:	4413      	add	r3, r2
 8001624:	0adb      	lsrs	r3, r3, #11
 8001626:	82bb      	strh	r3, [r7, #20]
	return voltage;
 8001628:	8abb      	ldrh	r3, [r7, #20]
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	00100101 	.word	0x00100101

0800163c <TF_BPPS>:

uint16_t bpps_global;
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw, Sensor *sensor){ //brake pedal position sensor
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	82fb      	strh	r3, [r7, #22]

	uint16_t min_raw = (sensor->calib_code % 2 == 1) ? 2615 : sensor->low_adc;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7b5b      	ldrb	r3, [r3, #13]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <TF_BPPS+0x26>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8a1b      	ldrh	r3, [r3, #16]
 8001660:	e001      	b.n	8001666 <TF_BPPS+0x2a>
 8001662:	f640 2337 	movw	r3, #2615	@ 0xa37
 8001666:	82bb      	strh	r3, [r7, #20]
	uint16_t max_raw = (sensor->calib_code > 2) ? 2925 : sensor->high_adc;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b5b      	ldrb	r3, [r3, #13]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d802      	bhi.n	8001676 <TF_BPPS+0x3a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	8a5b      	ldrh	r3, [r3, #18]
 8001674:	e001      	b.n	800167a <TF_BPPS+0x3e>
 8001676:	f640 336d 	movw	r3, #2925	@ 0xb6d
 800167a:	827b      	strh	r3, [r7, #18]

	if(raw > min_raw){
 800167c:	8abb      	ldrh	r3, [r7, #20]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d910      	bls.n	80016a6 <TF_BPPS+0x6a>
		uint16_t bpps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001684:	8abb      	ldrh	r3, [r7, #20]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	8afa      	ldrh	r2, [r7, #22]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	8a79      	ldrh	r1, [r7, #18]
 8001692:	8aba      	ldrh	r2, [r7, #20]
 8001694:	1a8a      	subs	r2, r1, r2
 8001696:	fbb3 f3f2 	udiv	r3, r3, r2
 800169a:	823b      	strh	r3, [r7, #16]
		bpps_global = bpps;
 800169c:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <TF_BPPS+0x78>)
 800169e:	8a3b      	ldrh	r3, [r7, #16]
 80016a0:	8013      	strh	r3, [r2, #0]
		return bpps;
 80016a2:	8a3b      	ldrh	r3, [r7, #16]
 80016a4:	e000      	b.n	80016a8 <TF_BPPS+0x6c>
	}
	return 0;
 80016a6:	2300      	movs	r3, #0

}
 80016a8:	4618      	mov	r0, r3
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	200006c8 	.word	0x200006c8

080016b8 <TF_APPS1>:
uint16_t TF_APPS1(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 80016c6:	2364      	movs	r3, #100	@ 0x64
 80016c8:	82fb      	strh	r3, [r7, #22]

	uint16_t min_raw = (sensor->calib_code % 2 == 1) ? 650 : sensor->low_adc;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <TF_APPS1+0x26>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8a1b      	ldrh	r3, [r3, #16]
 80016dc:	e001      	b.n	80016e2 <TF_APPS1+0x2a>
 80016de:	f240 238a 	movw	r3, #650	@ 0x28a
 80016e2:	82bb      	strh	r3, [r7, #20]
	uint16_t max_raw = (sensor->calib_code > 2) ? 1990 : sensor->high_adc;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b5b      	ldrb	r3, [r3, #13]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d802      	bhi.n	80016f2 <TF_APPS1+0x3a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8a5b      	ldrh	r3, [r3, #18]
 80016f0:	e001      	b.n	80016f6 <TF_APPS1+0x3e>
 80016f2:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 80016f6:	827b      	strh	r3, [r7, #18]


	if(raw > min_raw){
 80016f8:	8abb      	ldrh	r3, [r7, #20]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d910      	bls.n	8001722 <TF_APPS1+0x6a>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001700:	8abb      	ldrh	r3, [r7, #20]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	8afa      	ldrh	r2, [r7, #22]
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	8a79      	ldrh	r1, [r7, #18]
 800170e:	8aba      	ldrh	r2, [r7, #20]
 8001710:	1a8a      	subs	r2, r1, r2
 8001712:	fbb3 f3f2 	udiv	r3, r3, r2
 8001716:	823b      	strh	r3, [r7, #16]
		return 100 - apps;
 8001718:	8a3b      	ldrh	r3, [r7, #16]
 800171a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800171e:	b29b      	uxth	r3, r3
 8001720:	e000      	b.n	8001724 <TF_APPS1+0x6c>
	}
	return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <TF_APPS2>:

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 800173e:	2364      	movs	r3, #100	@ 0x64
 8001740:	82fb      	strh	r3, [r7, #22]

	uint16_t min_raw = (sensor->calib_code % 2 == 1) ? 690 : sensor->low_adc;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7b5b      	ldrb	r3, [r3, #13]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <TF_APPS2+0x26>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	8a1b      	ldrh	r3, [r3, #16]
 8001754:	e001      	b.n	800175a <TF_APPS2+0x2a>
 8001756:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800175a:	82bb      	strh	r3, [r7, #20]
	uint16_t max_raw = (sensor->calib_code > 2) ? 2130 : sensor->high_adc;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b5b      	ldrb	r3, [r3, #13]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d802      	bhi.n	800176a <TF_APPS2+0x3a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8a5b      	ldrh	r3, [r3, #18]
 8001768:	e001      	b.n	800176e <TF_APPS2+0x3e>
 800176a:	f640 0352 	movw	r3, #2130	@ 0x852
 800176e:	827b      	strh	r3, [r7, #18]



	if(raw > min_raw){
 8001770:	8abb      	ldrh	r3, [r7, #20]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	d910      	bls.n	800179a <TF_APPS2+0x6a>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001778:	8abb      	ldrh	r3, [r7, #20]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	8afa      	ldrh	r2, [r7, #22]
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	8a79      	ldrh	r1, [r7, #18]
 8001786:	8aba      	ldrh	r2, [r7, #20]
 8001788:	1a8a      	subs	r2, r1, r2
 800178a:	fbb3 f3f2 	udiv	r3, r3, r2
 800178e:	823b      	strh	r3, [r7, #16]
		return 100 - apps;
 8001790:	8a3b      	ldrh	r3, [r7, #16]
 8001792:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001796:	b29b      	uxth	r3, r3
 8001798:	e000      	b.n	800179c <TF_APPS2+0x6c>
	}
	return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	73fb      	strb	r3, [r7, #15]
		uint16_t max_volt = 5000;
 80017b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017ba:	82fb      	strh	r3, [r7, #22]

		uint16_t voltage = raw*max_volt / 4095;
 80017bc:	8afb      	ldrh	r3, [r7, #22]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	fb03 f202 	mul.w	r2, r3, r2
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <TF_BTN+0x48>)
 80017c6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ca:	1ad2      	subs	r2, r2, r3
 80017cc:	0852      	lsrs	r2, r2, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	0adb      	lsrs	r3, r3, #11
 80017d2:	82bb      	strh	r3, [r7, #20]

		if(voltage < 2000)
 80017d4:	8abb      	ldrh	r3, [r7, #20]
 80017d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017da:	d201      	bcs.n	80017e0 <TF_BTN+0x38>
			return 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <TF_BTN+0x3a>
		else
			return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	00100101 	.word	0x00100101

080017f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff feae 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f004 fa29 	bl	8005c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001826:	f7fe ffcd 	bl	80007c4 <main>

0800182a <LoopForever>:

LoopForever:
    b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   r0, =_estack
 800182c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001838:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 800183c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001840:	200006d0 	.word	0x200006d0

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>

08001846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f001 fb77 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f80e 	bl	8001878 <HAL_InitTick>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e001      	b.n	800186c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001868:	f7ff fc2a 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186c:	79fb      	ldrb	r3, [r7, #7]

}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <HAL_InitTick+0x68>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d022      	beq.n	80018d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_InitTick+0x6c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_InitTick+0x68>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001898:	fbb1 f3f3 	udiv	r3, r1, r3
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fb82 	bl	8002faa <HAL_SYSTICK_Config>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10f      	bne.n	80018cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	d809      	bhi.n	80018c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b2:	2200      	movs	r2, #0
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ba:	f001 fb4e 	bl	8002f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_InitTick+0x70>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e004      	b.n	80018d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	20000004 	.word	0x20000004
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_IncTick+0x1c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_IncTick+0x20>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_IncTick+0x1c>)
 80018fc:	6013      	str	r3, [r2, #0]
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	200006cc 	.word	0x200006cc
 800190c:	2000000c 	.word	0x2000000c

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200006cc 	.word	0x200006cc

08001928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3360      	adds	r3, #96	@ 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <LL_ADC_SetOffset+0x44>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	4313      	orrs	r3, r2
 80019c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	03fff000 	.word	0x03fff000

080019d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3360      	adds	r3, #96	@ 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3360      	adds	r3, #96	@ 0x60
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3360      	adds	r3, #96	@ 0x60
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3360      	adds	r3, #96	@ 0x60
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	615a      	str	r2, [r3, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3330      	adds	r3, #48	@ 0x30
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	211f      	movs	r1, #31
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 011f 	and.w	r1, r3, #31
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3314      	adds	r3, #20
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0e5b      	lsrs	r3, r3, #25
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0d1b      	lsrs	r3, r3, #20
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2107      	movs	r1, #7
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	0d1b      	lsrs	r3, r3, #20
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0318 	and.w	r3, r3, #24
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bc4:	40d9      	lsrs	r1, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	400b      	ands	r3, r1
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	0007ffff 	.word	0x0007ffff

08001be8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6093      	str	r3, [r2, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <LL_ADC_IsEnabled+0x18>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <LL_ADC_IsEnabled+0x1a>
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e167      	b.n	800204e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff f9bb 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff3f 	bl	8001c28 <LL_ADC_IsDeepPowerDownEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff25 	bl	8001c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff5a 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff3e 	bl	8001c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8002058 <HAL_ADC_Init+0x2f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	099b      	lsrs	r3, r3, #6
 8001dda:	4aa0      	ldr	r2, [pc, #640]	@ (800205c <HAL_ADC_Init+0x2f8>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff3c 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff75 	bl	8001d16 <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8100 	bne.w	800203c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80fc 	bne.w	800203c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e4c:	f043 0202 	orr.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff35 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d111      	bne.n	8001e88 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e68:	f7ff ff2e 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	487c      	ldr	r0, [pc, #496]	@ (8002060 <HAL_ADC_Init+0x2fc>)
 8001e70:	f7ff ff2a 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4323      	orrs	r3, r4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4878      	ldr	r0, [pc, #480]	@ (8002064 <HAL_ADC_Init+0x300>)
 8001e84:	f7ff fd50 	bl	8001928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7f5b      	ldrb	r3, [r3, #29]
 8001e8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	045b      	lsls	r3, r3, #17
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b60      	ldr	r3, [pc, #384]	@ (8002068 <HAL_ADC_Init+0x304>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff14 	bl	8001d3c <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d16d      	bne.n	8001ff8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d16a      	bne.n	8001ff8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6911      	ldr	r1, [r2, #16]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f82:	e013      	b.n	8001fac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e007      	b.n	8001ff8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10c      	bne.n	800201a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f023 010f 	bic.w	r1, r3, #15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
 8002018:	e007      	b.n	800202a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020f 	bic.w	r2, r2, #15
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	65da      	str	r2, [r3, #92]	@ 0x5c
 800203a:	e007      	b.n	800204c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800204c:	7ffb      	ldrb	r3, [r7, #31]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	20000004 	.word	0x20000004
 800205c:	053e2d63 	.word	0x053e2d63
 8002060:	50000100 	.word	0x50000100
 8002064:	50000300 	.word	0x50000300
 8002068:	fff04007 	.word	0xfff04007

0800206c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002078:	4851      	ldr	r0, [pc, #324]	@ (80021c0 <HAL_ADC_Start_DMA+0x154>)
 800207a:	f7ff fdb5 	bl	8001be8 <LL_ADC_GetMultimode>
 800207e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe46 	bl	8001d16 <LL_ADC_REG_IsConversionOngoing>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 808f 	bne.w	80021b0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x34>
 800209c:	2302      	movs	r3, #2
 800209e:	e08a      	b.n	80021b6 <HAL_ADC_Start_DMA+0x14a>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	d173      	bne.n	80021a2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fc8e 	bl	80029dc <ADC_Enable>
 80020c0:	4603      	mov	r3, r0
 80020c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d166      	bne.n	8002198 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a38      	ldr	r2, [pc, #224]	@ (80021c4 <HAL_ADC_Start_DMA+0x158>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d002      	beq.n	80020ee <HAL_ADC_Start_DMA+0x82>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e001      	b.n	80020f2 <HAL_ADC_Start_DMA+0x86>
 80020ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211c:	f023 0206 	bic.w	r2, r3, #6
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	661a      	str	r2, [r3, #96]	@ 0x60
 8002124:	e002      	b.n	800212c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <HAL_ADC_Start_DMA+0x15c>)
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	4a24      	ldr	r2, [pc, #144]	@ (80021cc <HAL_ADC_Start_DMA+0x160>)
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	4a23      	ldr	r2, [pc, #140]	@ (80021d0 <HAL_ADC_Start_DMA+0x164>)
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	221c      	movs	r2, #28
 800214a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3340      	adds	r3, #64	@ 0x40
 800217e:	4619      	mov	r1, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f000 ffc6 	bl	8003114 <HAL_DMA_Start_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fdac 	bl	8001cee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002196:	e00d      	b.n	80021b4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80021a0:	e008      	b.n	80021b4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	50000300 	.word	0x50000300
 80021c4:	50000100 	.word	0x50000100
 80021c8:	08002ae9 	.word	0x08002ae9
 80021cc:	08002bc1 	.word	0x08002bc1
 80021d0:	08002bdd 	.word	0x08002bdd

080021d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x22>
 800221a:	2302      	movs	r3, #2
 800221c:	e3c8      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x7b4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fd73 	bl	8001d16 <LL_ADC_REG_IsConversionOngoing>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 83ad 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	f7ff fc54 	bl	8001af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fd61 	bl	8001d16 <LL_ADC_REG_IsConversionOngoing>
 8002254:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fd6d 	bl	8001d3c <LL_ADC_INJ_IsConversionOngoing>
 8002262:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 81d9 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 81d4 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002282:	d10f      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	f7ff fc5b 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fc02 	bl	8001aa6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022a2:	e00e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7ff fc4a 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fbf2 	bl	8001aa6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d022      	beq.n	800232a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6919      	ldr	r1, [r3, #16]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022f4:	f7ff fb4c 	bl	8001990 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6919      	ldr	r1, [r3, #16]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	461a      	mov	r2, r3
 8002306:	f7ff fb98 	bl	8001a3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x124>
 800231a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231e:	e000      	b.n	8002322 <HAL_ADC_ConfigChannel+0x126>
 8002320:	2300      	movs	r3, #0
 8002322:	461a      	mov	r2, r3
 8002324:	f7ff fba4 	bl	8001a70 <LL_ADC_SetOffsetSaturation>
 8002328:	e17b      	b.n	8002622 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fb51 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x15a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fb46 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x198>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fb3b 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002378:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1b0>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x1e2>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80023c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e004      	b.n	80023de <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80023d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fb0a 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff faee 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x220>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fae3 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x25e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fad8 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800243a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800243e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800244e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x276>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x2a8>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002486:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800248a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800248e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800249a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff faa7 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fa8b 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x2e6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa80 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x324>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2102      	movs	r1, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa75 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002500:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002508:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x33c>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e016      	b.n	8002566 <HAL_ADC_ConfigChannel+0x36a>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800254a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800254c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e004      	b.n	8002566 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002566:	429a      	cmp	r2, r3
 8002568:	d106      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fa46 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fa2a 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x3a8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa1f 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	e017      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x3d8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2103      	movs	r1, #3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fa14 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025be:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80025ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x3f0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	e011      	b.n	8002610 <HAL_ADC_ConfigChannel+0x414>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80025fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2103      	movs	r1, #3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f9f1 	bl	8001a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fb4e 	bl	8001cc8 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8140 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff faad 	bl	8001ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a8f      	ldr	r2, [pc, #572]	@ (8002888 <HAL_ADC_ConfigChannel+0x68c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	f040 8131 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x47e>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b09      	cmp	r3, #9
 8002670:	bf94      	ite	ls
 8002672:	2301      	movls	r3, #1
 8002674:	2300      	movhi	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e019      	b.n	80026ae <HAL_ADC_ConfigChannel+0x4b2>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800268a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800268c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d079      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x4d2>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026cc:	e015      	b.n	80026fa <HAL_ADC_ConfigChannel+0x4fe>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_ADC_ConfigChannel+0x51e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	e017      	b.n	800274a <HAL_ADC_ConfigChannel+0x54e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800272c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e003      	b.n	800273e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x574>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	3301      	adds	r3, #1
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	e018      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x5a6>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800277e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800278c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a2:	430b      	orrs	r3, r1
 80027a4:	e081      	b.n	80028aa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x5c6>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c0:	e015      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5f2>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	069b      	lsls	r3, r3, #26
 80027ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_ADC_ConfigChannel+0x612>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	3301      	adds	r3, #1
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	e017      	b.n	800283e <HAL_ADC_ConfigChannel+0x642>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	61fb      	str	r3, [r7, #28]
  return result;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e003      	b.n	8002832 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	ea42 0103 	orr.w	r1, r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_ADC_ConfigChannel+0x66e>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	3301      	adds	r3, #1
 8002856:	f003 021f 	and.w	r2, r3, #31
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	3b1e      	subs	r3, #30
 8002862:	051b      	lsls	r3, r3, #20
 8002864:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002868:	e01e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x6ac>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	613b      	str	r3, [r7, #16]
  return result;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e006      	b.n	8002894 <HAL_ADC_ConfigChannel+0x698>
 8002886:	bf00      	nop
 8002888:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	3b1e      	subs	r3, #30
 80028a2:	051b      	lsls	r3, r3, #20
 80028a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7ff f94b 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b3f      	ldr	r3, [pc, #252]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7bc>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d071      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c0:	483e      	ldr	r0, [pc, #248]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c0>)
 80028c2:	f7ff f857 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 80028c6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3c      	ldr	r2, [pc, #240]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_ADC_ConfigChannel+0x6e2>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a3a      	ldr	r2, [pc, #232]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d127      	bne.n	800292e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d121      	bne.n	800292e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f2:	d157      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028fc:	4619      	mov	r1, r3
 80028fe:	482f      	ldr	r0, [pc, #188]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c0>)
 8002900:	f7ff f825 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <HAL_ADC_ConfigChannel+0x7d0>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800291e:	e002      	b.n	8002926 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3b01      	subs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292c:	e03a      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d113      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800293c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d02a      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	4619      	mov	r1, r3
 8002958:	4818      	ldr	r0, [pc, #96]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c0>)
 800295a:	f7fe fff8 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800295e:	e021      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d11c      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800296a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800296e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	@ (80029d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d011      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002988:	4619      	mov	r1, r3
 800298a:	480c      	ldr	r0, [pc, #48]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c0>)
 800298c:	f7fe ffdf 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
 8002990:	e008      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	37d8      	adds	r7, #216	@ 0xd8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	80080000 	.word	0x80080000
 80029bc:	50000300 	.word	0x50000300
 80029c0:	c3210000 	.word	0xc3210000
 80029c4:	90c00010 	.word	0x90c00010
 80029c8:	20000004 	.word	0x20000004
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	c7520000 	.word	0xc7520000
 80029d4:	50000100 	.word	0x50000100
 80029d8:	cb840000 	.word	0xcb840000

080029dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f96b 	bl	8001cc8 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d169      	bne.n	8002acc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4b36      	ldr	r3, [pc, #216]	@ (8002ad8 <ADC_Enable+0xfc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e055      	b.n	8002ace <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f93a 	bl	8001ca0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a2c:	482b      	ldr	r0, [pc, #172]	@ (8002adc <ADC_Enable+0x100>)
 8002a2e:	f7fe ffa1 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 8002a32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <ADC_Enable+0x104>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <ADC_Enable+0x108>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a56:	e002      	b.n	8002a5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ff54 	bl	8001910 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6a:	e028      	b.n	8002abe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f929 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f90d 	bl	8001ca0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a86:	f7fe ff43 	bl	8001910 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d00d      	beq.n	8002abe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1cf      	bne.n	8002a6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	8000003f 	.word	0x8000003f
 8002adc:	50000300 	.word	0x50000300
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	053e2d63 	.word	0x053e2d63

08002ae8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d14b      	bne.n	8002b9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d021      	beq.n	8002b60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ffd3 	bl	8001acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d032      	beq.n	8002b92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d12b      	bne.n	8002b92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b5e:	e018      	b.n	8002b92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d111      	bne.n	8002b92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7fe f99a 	bl	8000ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b98:	e00e      	b.n	8002bb8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff fb1e 	bl	80021e8 <HAL_ADC_ErrorCallback>
}
 8002bac:	e004      	b.n	8002bb8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff fb00 	bl	80021d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff faf0 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <LL_ADC_IsEnabled>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsEnabled+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsEnabled+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b0a1      	sub	sp, #132	@ 0x84
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e08b      	b.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c82:	2300      	movs	r3, #0
 8002c84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c86:	2300      	movs	r3, #0
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c92:	d102      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c94:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	e001      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e06a      	b.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ffb9 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002cc4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ffb3 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d14c      	bne.n	8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d149      	bne.n	8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	@ (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cde:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d028      	beq.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cfa:	035b      	lsls	r3, r3, #13
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d08:	f7ff ff82 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	4823      	ldr	r0, [pc, #140]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d10:	f7ff ff7e 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d133      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	6811      	ldr	r1, [r2, #0]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d38:	e024      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d46:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d4a:	f7ff ff61 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4812      	ldr	r0, [pc, #72]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d52:	f7ff ff5d 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4323      	orrs	r3, r4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d112      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d66:	f023 030f 	bic.w	r3, r3, #15
 8002d6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6e:	e009      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d82:	e000      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3784      	adds	r7, #132	@ 0x84
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	50000100 	.word	0x50000100
 8002da0:	50000300 	.word	0x50000300

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	@ (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	@ (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_DMA_Init+0x138>)
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d80f      	bhi.n	8003002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b45      	ldr	r3, [pc, #276]	@ (8003100 <HAL_DMA_Init+0x13c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a45      	ldr	r2, [pc, #276]	@ (8003104 <HAL_DMA_Init+0x140>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	@ (8003108 <HAL_DMA_Init+0x144>)
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003000:	e00e      	b.n	8003020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b40      	ldr	r3, [pc, #256]	@ (800310c <HAL_DMA_Init+0x148>)
 800300a:	4413      	add	r3, r2
 800300c:	4a3d      	ldr	r2, [pc, #244]	@ (8003104 <HAL_DMA_Init+0x140>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a3c      	ldr	r2, [pc, #240]	@ (8003110 <HAL_DMA_Init+0x14c>)
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9b6 	bl	80033e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003080:	d102      	bne.n	8003088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800309c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_DMA_Init+0x104>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d80c      	bhi.n	80030c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9d6 	bl	8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e008      	b.n	80030da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020407 	.word	0x40020407
 8003100:	bffdfff8 	.word	0xbffdfff8
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	40020000 	.word	0x40020000
 800310c:	bffdfbf8 	.word	0xbffdfbf8
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e066      	b.n	8003202 <HAL_DMA_Start_IT+0xee>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d155      	bne.n	80031f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8fb 	bl	8003368 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 020e 	orr.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 020a 	orr.w	r2, r2, #10
 80031aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e005      	b.n	8003200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2204      	movs	r2, #4
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d026      	beq.n	8003284 <HAL_DMA_IRQHandler+0x7a>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0204 	bic.w	r2, r2, #4
 800325c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	2104      	movs	r1, #4
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d071      	beq.n	800335e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003282:	e06c      	b.n	800335e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2202      	movs	r2, #2
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02e      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d029      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 020a 	bic.w	r2, r2, #10
 80032be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2102      	movs	r1, #2
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d038      	beq.n	800335e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032f4:	e033      	b.n	800335e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2208      	movs	r2, #8
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02a      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d025      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 020e 	bic.w	r2, r2, #14
 8003322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800335e:	bf00      	nop
 8003360:	bf00      	nop
}
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800337e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d108      	bne.n	80033c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033c6:	e007      	b.n	80033d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d802      	bhi.n	80033fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033f8:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e001      	b.n	8003402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80033fe:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003400:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3b08      	subs	r3, #8
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	009a      	lsls	r2, r3, #2
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a0b      	ldr	r2, [pc, #44]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800342e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	409a      	lsls	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40020407 	.word	0x40020407
 8003450:	40020800 	.word	0x40020800
 8003454:	40020820 	.word	0x40020820
 8003458:	cccccccd 	.word	0xcccccccd
 800345c:	40020880 	.word	0x40020880

08003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003482:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	1000823f 	.word	0x1000823f
 80034a4:	40020940 	.word	0x40020940

080034a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e147      	b.n	800374a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd ff52 	bl	8001378 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e4:	f7fe fa14 	bl	8001910 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034ea:	e012      	b.n	8003512 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034ec:	f7fe fa10 	bl	8001910 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b0a      	cmp	r3, #10
 80034f8:	d90b      	bls.n	8003512 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e11b      	b.n	800374a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d0e5      	beq.n	80034ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003530:	f7fe f9ee 	bl	8001910 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003536:	e012      	b.n	800355e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003538:	f7fe f9ea 	bl	8001910 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b0a      	cmp	r3, #10
 8003544:	d90b      	bls.n	800355e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0f5      	b.n	800374a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0e5      	beq.n	8003538 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0202 	orr.w	r2, r2, #2
 800357a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a74      	ldr	r2, [pc, #464]	@ (8003754 <HAL_FDCAN_Init+0x2ac>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003586:	4a74      	ldr	r2, [pc, #464]	@ (8003758 <HAL_FDCAN_Init+0x2b0>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7c1b      	ldrb	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a4:	619a      	str	r2, [r3, #24]
 80035a6:	e007      	b.n	80035b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7c5b      	ldrb	r3, [r3, #17]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	e007      	b.n	80035e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7c9b      	ldrb	r3, [r3, #18]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035f8:	619a      	str	r2, [r3, #24]
 80035fa:	e007      	b.n	800360c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800360a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003630:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0210 	bic.w	r2, r2, #16
 8003640:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0204 	orr.w	r2, r2, #4
 8003658:	619a      	str	r2, [r3, #24]
 800365a:	e02c      	b.n	80036b6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d028      	beq.n	80036b6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d01c      	beq.n	80036a6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800367a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0210 	orr.w	r2, r2, #16
 800368a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d110      	bne.n	80036b6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0220 	orr.w	r2, r2, #32
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	e007      	b.n	80036b6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036c6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036de:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036e0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ea:	d115      	bne.n	8003718 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	3b01      	subs	r3, #1
 80036f8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036fa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	3b01      	subs	r3, #1
 8003702:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003704:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	3b01      	subs	r3, #1
 800370e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003714:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003716:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fbb8 	bl	8003ea4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40006400 	.word	0x40006400
 8003758:	40006500 	.word	0x40006500

0800375c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d110      	bne.n	8003792 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e006      	b.n	80037a0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b08b      	sub	sp, #44	@ 0x2c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037c4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80037c6:	7efb      	ldrb	r3, [r7, #27]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	f040 80e8 	bne.w	800399e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d137      	bne.n	8003844 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0db      	b.n	80039ac <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	0e1b      	lsrs	r3, r3, #24
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10a      	bne.n	800381c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003818:	2301      	movs	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
 8003842:	e036      	b.n	80038b2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0a3      	b.n	80039ac <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10a      	bne.n	800388c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0c9b      	lsrs	r3, r3, #18
 80038cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e005      	b.n	80038e2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	3304      	adds	r3, #4
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	0e1b      	lsrs	r3, r3, #24
 8003936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0fda      	lsrs	r2, r3, #31
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	3304      	adds	r3, #4
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003952:	2300      	movs	r3, #0
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	e00a      	b.n	800396e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	441a      	add	r2, r3
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	440b      	add	r3, r1
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	3301      	adds	r3, #1
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a11      	ldr	r2, [pc, #68]	@ (80039b8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	461a      	mov	r2, r3
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	4293      	cmp	r3, r2
 800397c:	d3ec      	bcc.n	8003958 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d105      	bne.n	8003990 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800398e:	e004      	b.n	800399a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e006      	b.n	80039ac <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	372c      	adds	r7, #44	@ 0x2c
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	08005ce8 	.word	0x08005ce8

080039bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039ce:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d003      	beq.n	80039de <HAL_FDCAN_ActivateNotification+0x22>
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f040 80c8 	bne.w	8003b6e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03b      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d031      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d027      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01d      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d13b      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d131      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d127      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11d      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d113      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0202 	orr.w	r2, r2, #2
 8003b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e006      	b.n	8003b7c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
  }
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	@ 0x30
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b96:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003be2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	6a3a      	ldr	r2, [r7, #32]
 8003bec:	4013      	ands	r3, r2
 8003bee:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003bfa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c16:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d006      	beq.n	8003c3a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2240      	movs	r2, #64	@ 0x40
 8003c32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f916 	bl	8003e66 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d014      	beq.n	8003c78 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c56:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c70:	6939      	ldr	r1, [r7, #16]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8d8 	bl	8003e28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8a2 	bl	8003dd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc fcbc 	bl	800061c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f897 	bl	8003de8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f890 	bl	8003dfe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d018      	beq.n	8003d1a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003cfa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4013      	ands	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2280      	movs	r2, #128	@ 0x80
 8003d10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f87c 	bl	8003e12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00c      	beq.n	8003d3e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d36:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f880 	bl	8003e3e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f878 	bl	8003e52 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003d9a:	69f9      	ldr	r1, [r7, #28]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f876 	bl	8003e8e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f858 	bl	8003e7a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3730      	adds	r7, #48	@ 0x30
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003eac:	4b27      	ldr	r3, [pc, #156]	@ (8003f4c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003eae:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ebe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	041a      	lsls	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	061a      	lsls	r2, r3, #24
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e005      	b.n	8003f32 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3f3      	bcc.n	8003f26 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	4000a400 	.word	0x4000a400

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f5e:	e15a      	b.n	8004216 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 814c 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d005      	beq.n	8003f90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d130      	bne.n	8003ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0201 	and.w	r2, r3, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d017      	beq.n	800402e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d123      	bne.n	8004082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	08da      	lsrs	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3208      	adds	r2, #8
 8004042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	6939      	ldr	r1, [r7, #16]
 800407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a6 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <HAL_GPIO_Init+0x2e4>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004234 <HAL_GPIO_Init+0x2e4>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80040d0:	4b58      	ldr	r3, [pc, #352]	@ (8004234 <HAL_GPIO_Init+0x2e4>)
 80040d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040dc:	4a56      	ldr	r2, [pc, #344]	@ (8004238 <HAL_GPIO_Init+0x2e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004106:	d01f      	beq.n	8004148 <HAL_GPIO_Init+0x1f8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a4c      	ldr	r2, [pc, #304]	@ (800423c <HAL_GPIO_Init+0x2ec>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d019      	beq.n	8004144 <HAL_GPIO_Init+0x1f4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a4b      	ldr	r2, [pc, #300]	@ (8004240 <HAL_GPIO_Init+0x2f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_GPIO_Init+0x1f0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a4a      	ldr	r2, [pc, #296]	@ (8004244 <HAL_GPIO_Init+0x2f4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00d      	beq.n	800413c <HAL_GPIO_Init+0x1ec>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a49      	ldr	r2, [pc, #292]	@ (8004248 <HAL_GPIO_Init+0x2f8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <HAL_GPIO_Init+0x1e8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a48      	ldr	r2, [pc, #288]	@ (800424c <HAL_GPIO_Init+0x2fc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_GPIO_Init+0x1e4>
 8004130:	2305      	movs	r3, #5
 8004132:	e00a      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004134:	2306      	movs	r3, #6
 8004136:	e008      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004138:	2304      	movs	r3, #4
 800413a:	e006      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 800413c:	2303      	movs	r3, #3
 800413e:	e004      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004140:	2302      	movs	r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004148:	2300      	movs	r3, #0
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	f002 0203 	and.w	r2, r2, #3
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	4093      	lsls	r3, r2
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800415a:	4937      	ldr	r1, [pc, #220]	@ (8004238 <HAL_GPIO_Init+0x2e8>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004168:	4b39      	ldr	r3, [pc, #228]	@ (8004250 <HAL_GPIO_Init+0x300>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800418c:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <HAL_GPIO_Init+0x300>)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004192:	4b2f      	ldr	r3, [pc, #188]	@ (8004250 <HAL_GPIO_Init+0x300>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b6:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <HAL_GPIO_Init+0x300>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041bc:	4b24      	ldr	r3, [pc, #144]	@ (8004250 <HAL_GPIO_Init+0x300>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004250 <HAL_GPIO_Init+0x300>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <HAL_GPIO_Init+0x300>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800420a:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <HAL_GPIO_Init+0x300>)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f ae9d 	bne.w	8003f60 <HAL_GPIO_Init+0x10>
  }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	48000400 	.word	0x48000400
 8004240:	48000800 	.word	0x48000800
 8004244:	48000c00 	.word	0x48000c00
 8004248:	48001000 	.word	0x48001000
 800424c:	48001400 	.word	0x48001400
 8004250:	40010400 	.word	0x40010400

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004270:	e002      	b.n	8004278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4013      	ands	r3, r2
 800429c:	041a      	lsls	r2, r3, #16
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43d9      	mvns	r1, r3
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	400b      	ands	r3, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d141      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042c6:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d131      	bne.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042d4:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	4a46      	ldr	r2, [pc, #280]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e4:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042ec:	4a41      	ldr	r2, [pc, #260]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042f4:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2232      	movs	r2, #50	@ 0x32
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	4a3f      	ldr	r2, [pc, #252]	@ (80043fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	0c9b      	lsrs	r3, r3, #18
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430a:	e002      	b.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d102      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f2      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004326:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d158      	bne.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e057      	b.n	80043e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004338:	4b2e      	ldr	r3, [pc, #184]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433e:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004348:	e04d      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004350:	d141      	bne.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004352:	4b28      	ldr	r3, [pc, #160]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435e:	d131      	bne.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004366:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800436c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004370:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004378:	4a1e      	ldr	r2, [pc, #120]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800437e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2232      	movs	r2, #50	@ 0x32
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	0c9b      	lsrs	r3, r3, #18
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004396:	e002      	b.n	800439e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800439e:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043aa:	d102      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f2      	bne.n	8004398 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043be:	d112      	bne.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e011      	b.n	80043e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043d4:	e007      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043d6:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043de:	4a05      	ldr	r2, [pc, #20]	@ (80043f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40007000 	.word	0x40007000
 80043f8:	20000004 	.word	0x20000004
 80043fc:	431bde83 	.word	0x431bde83

08004400 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a04      	ldr	r2, [pc, #16]	@ (800441c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800440a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800440e:	6093      	str	r3, [r2, #8]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40007000 	.word	0x40007000

08004420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e2fe      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d075      	beq.n	800452a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443e:	4b97      	ldr	r3, [pc, #604]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004448:	4b94      	ldr	r3, [pc, #592]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d102      	bne.n	800445e <HAL_RCC_OscConfig+0x3e>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d002      	beq.n	8004464 <HAL_RCC_OscConfig+0x44>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d10b      	bne.n	800447c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	4b8d      	ldr	r3, [pc, #564]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d05b      	beq.n	8004528 <HAL_RCC_OscConfig+0x108>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d157      	bne.n	8004528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e2d9      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004484:	d106      	bne.n	8004494 <HAL_RCC_OscConfig+0x74>
 8004486:	4b85      	ldr	r3, [pc, #532]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a84      	ldr	r2, [pc, #528]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e01d      	b.n	80044d0 <HAL_RCC_OscConfig+0xb0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x98>
 800449e:	4b7f      	ldr	r3, [pc, #508]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7e      	ldr	r2, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b7c      	ldr	r3, [pc, #496]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7b      	ldr	r2, [pc, #492]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0xb0>
 80044b8:	4b78      	ldr	r3, [pc, #480]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a77      	ldr	r2, [pc, #476]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b75      	ldr	r3, [pc, #468]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a74      	ldr	r2, [pc, #464]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fa1a 	bl	8001910 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fd fa16 	bl	8001910 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	@ 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e29e      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f2:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0xc0>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd fa06 	bl	8001910 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd fa02 	bl	8001910 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e28a      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451a:	4b60      	ldr	r3, [pc, #384]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0xe8>
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d075      	beq.n	8004622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004536:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004540:	4b56      	ldr	r3, [pc, #344]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b0c      	cmp	r3, #12
 800454e:	d102      	bne.n	8004556 <HAL_RCC_OscConfig+0x136>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d002      	beq.n	800455c <HAL_RCC_OscConfig+0x13c>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d11f      	bne.n	800459c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800455c:	4b4f      	ldr	r3, [pc, #316]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_OscConfig+0x154>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e25d      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004574:	4b49      	ldr	r3, [pc, #292]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	4946      	ldr	r1, [pc, #280]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004588:	4b45      	ldr	r3, [pc, #276]	@ (80046a0 <HAL_RCC_OscConfig+0x280>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd f973 	bl	8001878 <HAL_InitTick>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d043      	beq.n	8004620 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e249      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d023      	beq.n	80045ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b3d      	ldr	r3, [pc, #244]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3c      	ldr	r2, [pc, #240]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd f9ae 	bl	8001910 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fd f9aa 	bl	8001910 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e232      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ca:	4b34      	ldr	r3, [pc, #208]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b31      	ldr	r3, [pc, #196]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	492d      	ldr	r1, [pc, #180]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
 80045ea:	e01a      	b.n	8004622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 80045f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd f98a 	bl	8001910 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd f986 	bl	8001910 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e20e      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004612:	4b22      	ldr	r3, [pc, #136]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x1e0>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d041      	beq.n	80046b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01c      	beq.n	8004670 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004636:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463c:	4a17      	ldr	r2, [pc, #92]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fd f963 	bl	8001910 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464e:	f7fd f95f 	bl	8001910 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1e7      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ef      	beq.n	800464e <HAL_RCC_OscConfig+0x22e>
 800466e:	e020      	b.n	80046b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004676:	4a09      	ldr	r2, [pc, #36]	@ (800469c <HAL_RCC_OscConfig+0x27c>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fd f946 	bl	8001910 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004686:	e00d      	b.n	80046a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fd f942 	bl	8001910 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d906      	bls.n	80046a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1ca      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a4:	4b8c      	ldr	r3, [pc, #560]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ea      	bne.n	8004688 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80a6 	beq.w	800480c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c0:	2300      	movs	r3, #0
 80046c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046c4:	4b84      	ldr	r3, [pc, #528]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2b4>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x2b6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b7f      	ldr	r3, [pc, #508]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046de:	4a7e      	ldr	r2, [pc, #504]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e6:	4b7c      	ldr	r3, [pc, #496]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046f2:	2301      	movs	r3, #1
 80046f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f6:	4b79      	ldr	r3, [pc, #484]	@ (80048dc <HAL_RCC_OscConfig+0x4bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d118      	bne.n	8004734 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004702:	4b76      	ldr	r3, [pc, #472]	@ (80048dc <HAL_RCC_OscConfig+0x4bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a75      	ldr	r2, [pc, #468]	@ (80048dc <HAL_RCC_OscConfig+0x4bc>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800470c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470e:	f7fd f8ff 	bl	8001910 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fd f8fb 	bl	8001910 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e183      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004728:	4b6c      	ldr	r3, [pc, #432]	@ (80048dc <HAL_RCC_OscConfig+0x4bc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d108      	bne.n	800474e <HAL_RCC_OscConfig+0x32e>
 800473c:	4b66      	ldr	r3, [pc, #408]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	4a65      	ldr	r2, [pc, #404]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800474c:	e024      	b.n	8004798 <HAL_RCC_OscConfig+0x378>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d110      	bne.n	8004778 <HAL_RCC_OscConfig+0x358>
 8004756:	4b60      	ldr	r3, [pc, #384]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475c:	4a5e      	ldr	r2, [pc, #376]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004766:	4b5c      	ldr	r3, [pc, #368]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	4a5a      	ldr	r2, [pc, #360]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004776:	e00f      	b.n	8004798 <HAL_RCC_OscConfig+0x378>
 8004778:	4b57      	ldr	r3, [pc, #348]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	4a56      	ldr	r2, [pc, #344]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004788:	4b53      	ldr	r3, [pc, #332]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	4a52      	ldr	r2, [pc, #328]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd f8b6 	bl	8001910 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd f8b2 	bl	8001910 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e138      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	4b46      	ldr	r3, [pc, #280]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ed      	beq.n	80047a8 <HAL_RCC_OscConfig+0x388>
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd f89f 	bl	8001910 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	e00a      	b.n	80047ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fd f89b 	bl	8001910 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e121      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ec:	4b3a      	ldr	r3, [pc, #232]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ed      	bne.n	80047d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047fa:	7ffb      	ldrb	r3, [r7, #31]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004800:	4b35      	ldr	r3, [pc, #212]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004804:	4a34      	ldr	r2, [pc, #208]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03c      	beq.n	8004892 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01c      	beq.n	800485a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004820:	4b2d      	ldr	r3, [pc, #180]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004826:	4a2c      	ldr	r2, [pc, #176]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd f86e 	bl	8001910 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004838:	f7fd f86a 	bl	8001910 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0f2      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800484a:	4b23      	ldr	r3, [pc, #140]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ef      	beq.n	8004838 <HAL_RCC_OscConfig+0x418>
 8004858:	e01b      	b.n	8004892 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800485a:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fd f851 	bl	8001910 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004872:	f7fd f84d 	bl	8001910 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0d5      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004884:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 8004886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1ef      	bne.n	8004872 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80c9 	beq.w	8004a2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800489c:	4b0e      	ldr	r3, [pc, #56]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	f000 8083 	beq.w	80049b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d15e      	bne.n	8004970 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a08      	ldr	r2, [pc, #32]	@ (80048d8 <HAL_RCC_OscConfig+0x4b8>)
 80048b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd f827 	bl	8001910 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c4:	e00c      	b.n	80048e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fd f823 	bl	8001910 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d905      	bls.n	80048e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e0ab      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e0:	4b55      	ldr	r3, [pc, #340]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ec      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ec:	4b52      	ldr	r3, [pc, #328]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	4b52      	ldr	r3, [pc, #328]	@ (8004a3c <HAL_RCC_OscConfig+0x61c>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6a11      	ldr	r1, [r2, #32]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048fc:	3a01      	subs	r2, #1
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004906:	0212      	lsls	r2, r2, #8
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800490e:	0852      	lsrs	r2, r2, #1
 8004910:	3a01      	subs	r2, #1
 8004912:	0552      	lsls	r2, r2, #21
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800491a:	0852      	lsrs	r2, r2, #1
 800491c:	3a01      	subs	r2, #1
 800491e:	0652      	lsls	r2, r2, #25
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004926:	06d2      	lsls	r2, r2, #27
 8004928:	430a      	orrs	r2, r1
 800492a:	4943      	ldr	r1, [pc, #268]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 800492c:	4313      	orrs	r3, r2
 800492e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b41      	ldr	r3, [pc, #260]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a40      	ldr	r2, [pc, #256]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800493c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a3d      	ldr	r2, [pc, #244]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004946:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fc ffe2 	bl	8001910 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004950:	f7fc ffde 	bl	8001910 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e066      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	4b35      	ldr	r3, [pc, #212]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x530>
 800496e:	e05e      	b.n	8004a2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a30      	ldr	r2, [pc, #192]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fc ffc8 	bl	8001910 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fc ffc4 	bl	8001910 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e04c      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004996:	4b28      	ldr	r3, [pc, #160]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049a2:	4b25      	ldr	r3, [pc, #148]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	4924      	ldr	r1, [pc, #144]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 80049a8:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <HAL_RCC_OscConfig+0x620>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60cb      	str	r3, [r1, #12]
 80049ae:	e03e      	b.n	8004a2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e039      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <HAL_RCC_OscConfig+0x618>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0203 	and.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d12c      	bne.n	8004a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	3b01      	subs	r3, #1
 80049dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d123      	bne.n	8004a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d11b      	bne.n	8004a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d113      	bne.n	8004a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d001      	beq.n	8004a2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	019f800c 	.word	0x019f800c
 8004a40:	feeefffc 	.word	0xfeeefffc

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e11e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b91      	ldr	r3, [pc, #580]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d910      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 020f 	bic.w	r2, r3, #15
 8004a72:	498c      	ldr	r1, [pc, #560]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e106      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d073      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d129      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa0:	4b81      	ldr	r3, [pc, #516]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0f4      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ab0:	f000 f966 	bl	8004d80 <RCC_GetSysClockFreqFromPLLSource>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4a7c      	ldr	r2, [pc, #496]	@ (8004cac <HAL_RCC_ClockConfig+0x268>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d93f      	bls.n	8004b3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004abe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d033      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d12f      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ade:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ae6:	4a70      	ldr	r2, [pc, #448]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004aee:	2380      	movs	r3, #128	@ 0x80
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e024      	b.n	8004b3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afc:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0c6      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0be      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b1c:	f000 f8ce 	bl	8004cbc <HAL_RCC_GetSysClockFreq>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4a61      	ldr	r2, [pc, #388]	@ (8004cac <HAL_RCC_ClockConfig+0x268>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d909      	bls.n	8004b3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b32:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b3a:	2380      	movs	r3, #128	@ 0x80
 8004b3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4957      	ldr	r1, [pc, #348]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b50:	f7fc fede 	bl	8001910 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fc feda 	bl	8001910 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e095      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d023      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b98:	4b43      	ldr	r3, [pc, #268]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ba2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4936      	ldr	r1, [pc, #216]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bda:	4b33      	ldr	r3, [pc, #204]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	4a32      	ldr	r2, [pc, #200]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004be4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d21d      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 020f 	bic.w	r2, r3, #15
 8004bfc:	4929      	ldr	r1, [pc, #164]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c04:	f7fc fe84 	bl	8001910 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fc fe80 	bl	8001910 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03b      	b.n	8004c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b20      	ldr	r3, [pc, #128]	@ (8004ca4 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1ed      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4917      	ldr	r1, [pc, #92]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490f      	ldr	r1, [pc, #60]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c6e:	f000 f825 	bl	8004cbc <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <HAL_RCC_ClockConfig+0x264>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490c      	ldr	r1, [pc, #48]	@ (8004cb0 <HAL_RCC_ClockConfig+0x26c>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_RCC_ClockConfig+0x270>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <HAL_RCC_ClockConfig+0x274>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fdf0 	bl	8001878 <HAL_InitTick>
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40022000 	.word	0x40022000
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	04c4b400 	.word	0x04c4b400
 8004cb0:	08005cd8 	.word	0x08005cd8
 8004cb4:	20000004 	.word	0x20000004
 8004cb8:	20000008 	.word	0x20000008

08004cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cce:	4b2a      	ldr	r3, [pc, #168]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e047      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d102      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ce0:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e03e      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ce6:	4b23      	ldr	r3, [pc, #140]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d136      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	3301      	adds	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d10c      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d10:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1a:	68d2      	ldr	r2, [r2, #12]
 8004d1c:	0a12      	lsrs	r2, r2, #8
 8004d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	617b      	str	r3, [r7, #20]
      break;
 8004d28:	e00c      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d2a:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	4a10      	ldr	r2, [pc, #64]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	0a12      	lsrs	r2, r2, #8
 8004d38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
      break;
 8004d42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0e5b      	lsrs	r3, r3, #25
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	e001      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d64:	693b      	ldr	r3, [r7, #16]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	007a1200 	.word	0x007a1200

08004d80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d86:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d10c      	bne.n	8004dbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da4:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	0a12      	lsrs	r2, r2, #8
 8004db2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	617b      	str	r3, [r7, #20]
    break;
 8004dbc:	e00c      	b.n	8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dbe:	4a12      	ldr	r2, [pc, #72]	@ (8004e08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	0a12      	lsrs	r2, r2, #8
 8004dcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    break;
 8004dd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0e5b      	lsrs	r3, r3, #25
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40021000 	.word	0x40021000
 8004e04:	007a1200 	.word	0x007a1200
 8004e08:	00f42400 	.word	0x00f42400

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8098 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b40      	ldr	r3, [pc, #256]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e46:	4b3d      	ldr	r3, [pc, #244]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e56:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a39      	ldr	r2, [pc, #228]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e62:	f7fc fd55 	bl	8001910 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e68:	e009      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fc fd51 	bl	8001910 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e7c:	e005      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	4b30      	ldr	r3, [pc, #192]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ef      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d159      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e90:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01e      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eac:	4b23      	ldr	r3, [pc, #140]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	4a1b      	ldr	r2, [pc, #108]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fc fd11 	bl	8001910 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fc fd0d 	bl	8001910 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	74fb      	strb	r3, [r7, #19]
            break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ec      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f48:	7c7b      	ldrb	r3, [r7, #17]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	4aa5      	ldr	r2, [pc, #660]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f66:	4ba0      	ldr	r3, [pc, #640]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6c:	f023 0203 	bic.w	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	499c      	ldr	r1, [pc, #624]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f88:	4b97      	ldr	r3, [pc, #604]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f023 020c 	bic.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4994      	ldr	r1, [pc, #592]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004faa:	4b8f      	ldr	r3, [pc, #572]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	498b      	ldr	r1, [pc, #556]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fcc:	4b86      	ldr	r3, [pc, #536]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	4983      	ldr	r1, [pc, #524]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fee:	4b7e      	ldr	r3, [pc, #504]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	497a      	ldr	r1, [pc, #488]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005010:	4b75      	ldr	r3, [pc, #468]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4972      	ldr	r1, [pc, #456]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005032:	4b6d      	ldr	r3, [pc, #436]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4969      	ldr	r1, [pc, #420]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005054:	4b64      	ldr	r3, [pc, #400]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4961      	ldr	r1, [pc, #388]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	4958      	ldr	r1, [pc, #352]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	4950      	ldr	r1, [pc, #320]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b6:	d105      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b4b      	ldr	r3, [pc, #300]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a4a      	ldr	r2, [pc, #296]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d015      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4942      	ldr	r1, [pc, #264]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ee:	d105      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f0:	4b3d      	ldr	r3, [pc, #244]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005108:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	4934      	ldr	r1, [pc, #208]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005126:	d105      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005128:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a2e      	ldr	r2, [pc, #184]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005140:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	4926      	ldr	r1, [pc, #152]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515e:	d105      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005160:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a20      	ldr	r2, [pc, #128]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	4918      	ldr	r1, [pc, #96]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a12      	ldr	r2, [pc, #72]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051b0:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a04      	ldr	r2, [pc, #16]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e049      	b.n	8005292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc f912 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 fb1c 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04a      	b.n	800534a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a21      	ldr	r2, [pc, #132]	@ (8005358 <HAL_TIM_Base_Start_IT+0xbc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052de:	d013      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1d      	ldr	r2, [pc, #116]	@ (800535c <HAL_TIM_Base_Start_IT+0xc0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005360 <HAL_TIM_Base_Start_IT+0xc4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005364 <HAL_TIM_Base_Start_IT+0xc8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <HAL_TIM_Base_Start_IT+0xcc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d115      	bne.n	8005334 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	4b17      	ldr	r3, [pc, #92]	@ (800536c <HAL_TIM_Base_Start_IT+0xd0>)
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b06      	cmp	r3, #6
 8005318:	d015      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0xaa>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005320:	d011      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	e008      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e000      	b.n	8005348 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40013400 	.word	0x40013400
 8005368:	40014000 	.word	0x40014000
 800536c:	00010007 	.word	0x00010007

08005370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d020      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01b      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0202 	mvn.w	r2, #2
 80053a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa36 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa28 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa39 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d020      	beq.n	8005420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0204 	mvn.w	r2, #4
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa10 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa02 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa13 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0208 	mvn.w	r2, #8
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9ea 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9dc 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9ed 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2208      	movs	r2, #8
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9c4 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9b6 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9c7 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0201 	mvn.w	r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f994 	bl	8005804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb73 	bl	8005bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fb6b 	bl	8005c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f981 	bl	8005854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0220 	mvn.w	r2, #32
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb33 	bl	8005bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fb3f 	bl	8005c18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80055b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb37 	bl	8005c2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb2f 	bl	8005c40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fb27 	bl	8005c54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_TIM_ConfigClockSource+0x1c>
 8005628:	2302      	movs	r3, #2
 800562a:	e0de      	b.n	80057ea <HAL_TIM_ConfigClockSource+0x1da>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800564a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a63      	ldr	r2, [pc, #396]	@ (80057f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	f000 80a9 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 800566c:	4a61      	ldr	r2, [pc, #388]	@ (80057f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f200 80ae 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005674:	4a60      	ldr	r2, [pc, #384]	@ (80057f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	f000 80a1 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 800567c:	4a5e      	ldr	r2, [pc, #376]	@ (80057f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f200 80a6 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005684:	4a5d      	ldr	r2, [pc, #372]	@ (80057fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f000 8099 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 800568c:	4a5b      	ldr	r2, [pc, #364]	@ (80057fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800568e:	4293      	cmp	r3, r2
 8005690:	f200 809e 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005694:	4a5a      	ldr	r2, [pc, #360]	@ (8005800 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f000 8091 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 800569c:	4a58      	ldr	r2, [pc, #352]	@ (8005800 <HAL_TIM_ConfigClockSource+0x1f0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	f200 8096 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056a8:	f000 8089 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 80056ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056b0:	f200 808e 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b8:	d03e      	beq.n	8005738 <HAL_TIM_ConfigClockSource+0x128>
 80056ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056be:	f200 8087 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	f000 8086 	beq.w	80057d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ce:	d87f      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056d0:	2b70      	cmp	r3, #112	@ 0x70
 80056d2:	d01a      	beq.n	800570a <HAL_TIM_ConfigClockSource+0xfa>
 80056d4:	2b70      	cmp	r3, #112	@ 0x70
 80056d6:	d87b      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056d8:	2b60      	cmp	r3, #96	@ 0x60
 80056da:	d050      	beq.n	800577e <HAL_TIM_ConfigClockSource+0x16e>
 80056dc:	2b60      	cmp	r3, #96	@ 0x60
 80056de:	d877      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056e0:	2b50      	cmp	r3, #80	@ 0x50
 80056e2:	d03c      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x14e>
 80056e4:	2b50      	cmp	r3, #80	@ 0x50
 80056e6:	d873      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	d058      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x18e>
 80056ec:	2b40      	cmp	r3, #64	@ 0x40
 80056ee:	d86f      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d064      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 80056f4:	2b30      	cmp	r3, #48	@ 0x30
 80056f6:	d86b      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d060      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d867      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d05c      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 8005704:	2b10      	cmp	r3, #16
 8005706:	d05a      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x1ae>
 8005708:	e062      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	f000 f9bd 	bl	8005a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800572c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	609a      	str	r2, [r3, #8]
      break;
 8005736:	e04f      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005748:	f000 f9a6 	bl	8005a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800575a:	609a      	str	r2, [r3, #8]
      break;
 800575c:	e03c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	461a      	mov	r2, r3
 800576c:	f000 f918 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2150      	movs	r1, #80	@ 0x50
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f971 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 800577c:	e02c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800578a:	461a      	mov	r2, r3
 800578c:	f000 f937 	bl	80059fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2160      	movs	r1, #96	@ 0x60
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f961 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 800579c:	e01c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	461a      	mov	r2, r3
 80057ac:	f000 f8f8 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2140      	movs	r1, #64	@ 0x40
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f951 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 80057bc:	e00c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f000 f948 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 80057ce:	e003      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e000      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80057d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	00100070 	.word	0x00100070
 80057f8:	00100040 	.word	0x00100040
 80057fc:	00100030 	.word	0x00100030
 8005800:	00100020 	.word	0x00100020

08005804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a42      	ldr	r2, [pc, #264]	@ (8005984 <TIM_Base_SetConfig+0x11c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x38>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3f      	ldr	r2, [pc, #252]	@ (8005988 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x38>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3e      	ldr	r2, [pc, #248]	@ (800598c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x38>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3d      	ldr	r2, [pc, #244]	@ (8005990 <TIM_Base_SetConfig+0x128>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a33      	ldr	r2, [pc, #204]	@ (8005984 <TIM_Base_SetConfig+0x11c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a30      	ldr	r2, [pc, #192]	@ (8005988 <TIM_Base_SetConfig+0x120>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2f      	ldr	r2, [pc, #188]	@ (800598c <TIM_Base_SetConfig+0x124>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005990 <TIM_Base_SetConfig+0x128>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0x8a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2b      	ldr	r2, [pc, #172]	@ (800599c <TIM_Base_SetConfig+0x134>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_Base_SetConfig+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0xe8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <TIM_Base_SetConfig+0x128>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0xe8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a16      	ldr	r2, [pc, #88]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0xe8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xe8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a14      	ldr	r2, [pc, #80]	@ (800599c <TIM_Base_SetConfig+0x134>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d105      	bne.n	8005976 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	611a      	str	r2, [r3, #16]
  }
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40013400 	.word	0x40013400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0210 	bic.w	r2, r3, #16
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f043 0307 	orr.w	r3, r3, #7
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e065      	b.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d108      	bne.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b66:	d013      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a12      	ldr	r2, [pc, #72]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10c      	bne.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40014000 	.word	0x40014000

08005bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <memset>:
 8005c68:	4402      	add	r2, r0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <memset+0xa>
 8005c70:	4770      	bx	lr
 8005c72:	f803 1b01 	strb.w	r1, [r3], #1
 8005c76:	e7f9      	b.n	8005c6c <memset+0x4>

08005c78 <__libc_init_array>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb0 <__libc_init_array+0x38>)
 8005c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cb4 <__libc_init_array+0x3c>)
 8005c7e:	1b64      	subs	r4, r4, r5
 8005c80:	10a4      	asrs	r4, r4, #2
 8005c82:	2600      	movs	r6, #0
 8005c84:	42a6      	cmp	r6, r4
 8005c86:	d109      	bne.n	8005c9c <__libc_init_array+0x24>
 8005c88:	4d0b      	ldr	r5, [pc, #44]	@ (8005cb8 <__libc_init_array+0x40>)
 8005c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005cbc <__libc_init_array+0x44>)
 8005c8c:	f000 f818 	bl	8005cc0 <_init>
 8005c90:	1b64      	subs	r4, r4, r5
 8005c92:	10a4      	asrs	r4, r4, #2
 8005c94:	2600      	movs	r6, #0
 8005c96:	42a6      	cmp	r6, r4
 8005c98:	d105      	bne.n	8005ca6 <__libc_init_array+0x2e>
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca0:	4798      	blx	r3
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7ee      	b.n	8005c84 <__libc_init_array+0xc>
 8005ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005caa:	4798      	blx	r3
 8005cac:	3601      	adds	r6, #1
 8005cae:	e7f2      	b.n	8005c96 <__libc_init_array+0x1e>
 8005cb0:	08005cf8 	.word	0x08005cf8
 8005cb4:	08005cf8 	.word	0x08005cf8
 8005cb8:	08005cf8 	.word	0x08005cf8
 8005cbc:	08005cfc 	.word	0x08005cfc

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
